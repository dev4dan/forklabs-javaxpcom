<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  


  

  <head>
    <title>
      XPCOMGuide â€“
      LADyR_wiki
    </title>
        <link rel="search" href="/wiki/search" />
        <link rel="help" href="/wiki/wiki/TracGuide" />
        <link rel="alternate" href="/wiki/wiki/XPCOMGuide?format=txt" type="text/x-trac-wiki" title="Plain Text" />
        <link rel="up" href="/wiki/wiki/XPCOMGuide" title="View Latest Version" />
        <link rel="start" href="/wiki/wiki" />
        <link rel="stylesheet" href="/trac/css/trac.css" type="text/css" /><link rel="stylesheet" href="/trac/css/wiki.css" type="text/css" />
        <link rel="shortcut icon" href="http://ladyr.es/assets/templates/modxhost/images/ladyr_logo.jpg" type="image/jpeg" />
        <link rel="icon" href="http://ladyr.es/assets/templates/modxhost/images/ladyr_logo.jpg" type="image/jpeg" />
      <link type="application/opensearchdescription+xml" rel="search" href="/wiki/search/opensearch" title="Search LADyR_wiki" />
    <script type="text/javascript" src="/trac/js/jquery.js"></script><script type="text/javascript" src="/trac/js/trac.js"></script><script type="text/javascript" src="/trac/js/search.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/trac/js/ie_pre7_hacks.js"></script>
    <![endif]-->
    <script type="text/javascript">
      jQuery(document).ready(function($) {
        $("#content").find("h1,h2,h3,h4,h5,h6").addAnchor("Link to this section");
      });
    </script>
  </head>
  <body>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://ladyr.es/wiki"><img src="http://ladyr.es/assets/templates/modxhost/images/ladyr_logo.jpg" alt="LADyR wiki" /></a>
      </div>
      <form id="search" action="/wiki/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="/wiki/login">Login</a></li><li><a href="/wiki/prefs">Preferences</a></li><li><a href="/wiki/wiki/TracGuide">Help/Guide</a></li><li class="last"><a href="/wiki/about">About Trac</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first active"><a href="/wiki/wiki">Wiki</a></li><li><a href="/wiki/browser">Browse Source</a></li><li class="last"><a href="/wiki/search">Search</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
            <li class="first "><a href="/wiki/wiki/WikiStart">Start Page</a></li><li><a href="/wiki/wiki/TitleIndex">Index</a></li><li><a href="/wiki/wiki/XPCOMGuide?action=history">History</a></li><li class="last"><a href="/wiki/wiki/XPCOMGuide?action=diff&amp;version=58">Last Change</a></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="wiki">
      <div class="wikipage searchable">
        
          <h1 id="XULRunnerwithJava:JavaXPCOMTutorial">XULRunner with Java: JavaXPCOM Tutorial</h1>
<hr />
<p>
<strong>Contact Information</strong> 
</p>
<p>You can send us a mail to <a href="mailto:info-ladyr--at--gsyc.es">info-ladyr at gsyc.es</a> with your doubts, questions, comments or suggestions.</p>
<hr />
<p>
This tutorial was updated on summer of 2008 in relation to integrating SWT and XULRunner in order to show a web browser in SWT. For more information, you
can consult the official SWT page <a class="ext-link" href="http://www.eclipse.org/swt/faq.php#whatisbrowser"><span class="icon">http://www.eclipse.org/swt/faq.php#whatisbrowser</span></a>.
</p>
<p>
Important note: Windows sources files aren't updated yet, but the source code won't be different than linux source code.
</p>
<h2 id="a1.Introduction">1. Introduction</h2>
<p>
In this guide we cover two main objectives. First, we learn some XPCOM concepts and use the JavaXPCOM bridge to work with them from Java code. Second, we learn about how to embedding Firefox browser into a Java application.
</p>
<p>
The examples shown here have been developed, compiled and tested using GNU Linux Ubuntu 8.04 and Java SDK 1.6. We have detected a problem under Windows which causes that the user cannot type text in form fields, although that is not necessary for the examples.
</p>
<h3 id="a1.1DownloadingResources">1.1 Downloading Resources</h3>
<p>
The source code for the examples is available to download from the begining of the corresponding chapter or at the end of the page. Also, you can download <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/complete-guide-resources-windows.zip">this zip for windows</a> or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/complete-guide-resources-linux.zip">this for Linux</a> containing all the files needed and the whole source code.
</p>
<h2 id="a2.XULRunnerInstallation">2. XULRunner Installation</h2>
<p>
JavaXPCOM is a Java library to access to XPCOM componentes and services in XULRunner. In this tutorial we explain several ways to use XULRunner components and services from Java. JavaXPCOM also can be used to embed Gecko (Firefox web rendering engine included in XULRunner) in a Java application. JavaXPCOM works with Java 1.4.2 or newer. To use JavaXPCOM you need to follow this steps:
</p>
<ul><li><strong>XULRunner</strong>: You need to install XULRunner. In this moment, it is in developer preview state and is changing continuosly. This tutorial is made with the 1.9 version, built in 2008-6-19. Instructions to install XULRunner:
<ol><li>Download the appropriate XULRunner package for your operating system: <a class="ext-link" href="http://releases.mozilla.org/pub/mozilla.org/xulrunner/releases/1.9.0.0/runtimes/xulrunner-1.9.en-US.linux-i686.tar.bz2"><span class="icon">Linux version from here</span></a> or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/xulrunner-1.9.en-US.linux-i686.tar.bz2">from our page</a>. If you are windows user download <a class="ext-link" href="http://releases.mozilla.org/pub/mozilla.org/xulrunner/releases/1.9.0.0/runtimes/xulrunner-1.9.en-US.win32.zip"><span class="icon">Win32 version from here</span></a> or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/xulrunner-1.9.en-US.win32.zip">from our page</a>.
</li><li>Unpack the XULRunner package in a directory of your choice (for example, C:\XULRunner).
</li><li>Change to the directory where the XULRunner executable file resides.
</li><li>Uninstall any previous version of Mozilla xulrunner.
<ul><li>If registered for all users:
<ul><li>Win32: <tt>xulrunner --unregister-global</tt>
</li><li>Linux: <tt>sudo ./xulrunner --unregister-global</tt>
</li></ul></li><li>If registered only for current user:
<ul><li>Win32: <tt>xulrunner --unregister-user</tt>
</li><li>Linux: <tt>./xulrunner --unregister-user</tt>
</li></ul></li></ul></li><li>Register XULRunner by executing either of the following at the command line:
<ul><li>Register for all users:
<ul><li>Win32: <tt>xulrunner --register-global</tt>
</li><li>Linux: <tt>sudo ./xulrunner --register-global</tt>
</li></ul></li><li>Register only for current user:
<ul><li>Win32: <tt>xulrunner --register-user</tt>
</li><li>Linux: <tt>./xulrunner --register-user</tt>
</li></ul></li></ul></li></ol></li></ul><ul><li><strong>javaxpcom.jar:</strong> Add this library to your CLASSPATH. This library provides the classes that allow use JavaXPCOM. It is located at your XULRunner installation directory. Also there is javaxpcom-src.jar file wich contains source files with their JavaDoc. The JavaDoc for JavaXPCOM will be available soon to be browsed online.
</li></ul><blockquote>
<p>
With XULRunner 1.9, you need download the XULRunner SDK, you can download <a class="ext-link" href="http://releases.mozilla.org/pub/mozilla.org/xulrunner/releases/1.9.0.0/sdk/xulrunner-1.9.en-US.linux-i686.sdk.tar.bz2"><span class="icon">Linux version from here</span></a> or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/xulrunner-1.9.en-US.linux-i686.sdk.tar.bz2">from our page</a> and if you are windows user download <a class="ext-link" href="http://releases.mozilla.org/pub/mozilla.org/xulrunner/releases/1.9.0.0/sdk/xulrunner-1.9.en-US.win32.sdk.zip"><span class="icon">Win32 version from here</span></a> or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/xulrunner-1.9.en-US.win32.sdk.zip">from our page</a>
</p>
</blockquote>
<ul><li><strong>MozillaInterfaces.jar:</strong> Add this library to your CLASSPATH. This library contains XPCOM interfaces of components and services included in XULRunner. This file is autogenerated from IPDL files that describe XPCOM interfaces. You can find it in the XULRunner SDK downloaded before or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/MozillaInterfaces.jar">here</a> , inside the lib folder. Also you can find on that foulder the MozillaInterfaces-src.jar, or download <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/MozillaInterfaces-src.jar">here</a>. 
</li><li><strong>MozillaGlue.jar:</strong> Add this library to your CLASSPATH. This library contains another XPCOM interfaces of components and services included in XULRunner. You can find this file in the XULRunner SDK too, or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/MozillaGlue.jar">here</a>, from our site. 
</li></ul><h2 id="a3.UseJavaXPCOMfromaJavaApplication">3. Use JavaXPCOM from a Java Application</h2>
<p>
<a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/javaxpcom-test-src.zip">Source code for all the examples in this chapter</a>
</p>
<h3 id="a3.1JavaXPCOMinitialization">3.1 JavaXPCOM initialization</h3>
<p>
XPCOM (Mozilla Cross-platform Object Model) is, as its name suggests, a component based architecture. In order to use XPCOM components from Java, we need some initialization and finalization code. There are two different ways to do it. Please, take a look at the following commented sample code:
</p>
<p>
First, we can use <tt>initXPCOM</tt> method:
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.test;

<B><span class="code-lang">import</span></B> java.io.File;
<B><span class="code-lang">import</span></B> java.io.FileNotFoundException;
<B><span class="code-lang">import</span></B> java.util.Properties;

<B><span class="code-lang">import</span></B> org.mozilla.xpcom.GREVersionRange;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.Mozilla;

<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> SimplestInitializationCode {

        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String[] args) {

                <I><span class="code-comment">// JavaXPCOM initialization
</span></I>                GREVersionRange[] range = <B><span class="code-lang">new</span></B> GREVersionRange[1];
                range[0] = <B><span class="code-lang">new</span></B> GREVersionRange(<B><span class="code-string">&quot;1.8&quot;</span></B>, <B><span class="code-lang">true</span></B>, <B><span class="code-string">&quot;1.9+&quot;</span></B>, <B><span class="code-lang">true</span></B>);

                Properties props = <B><span class="code-lang">null</span></B>;
                File grePath = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">try</span></B> {
                        grePath = Mozilla.getGREPathWithProperties(range, props);
                } <B><span class="code-lang">catch</span></B> (FileNotFoundException e) {
                        System.out.println(<B><span class="code-string">&quot;XULRunner not found. It is possible that it be wrong installed&quot;</span></B>);
                        <B><span class="code-lang">return</span></B>;
                }
                

                Mozilla mozilla = Mozilla.getInstance();
                mozilla.initialize(grePath);

                <B><span class="code-lang">try</span></B> {
                        mozilla.initXPCOM(grePath, <B><span class="code-lang">null</span></B>);
                
                } <B><span class="code-lang">catch</span></B> (Throwable t) {
                        System.out.println(<B><span class="code-string">&quot;initXPCOM failed&quot;</span></B>);
                        t.printStackTrace();
                        <B><span class="code-lang">return</span></B>;
                }
                <I><span class="code-comment">// From this line, we can use JavaXPCOM
</span></I>
                System.out.println(<B><span class="code-string">&quot;\n--&gt; initialized\n&quot;</span></B>);
                
                <I><span class="code-comment">// ... your application code ...
</span></I>
                <I><span class="code-comment">// JavaXPOM finalization
</span></I>                mozilla.shutdownXPCOM(<B><span class="code-lang">null</span></B>);
        }
}
</pre></div><p>
For embedding purposes you should use <tt>initEmbedding</tt> method. That method requires a <tt>IAppFileLocProvider</tt> implementation class. We use an implementation from <a class="ext-link" href="http://www.eclipse.org/atf/"><span class="icon">ATF Plug-in</span></a> called <tt>LocationProvider</tt> from package <tt>org.eclipse.atf.mozilla.ide.core</tt>. The class code is here:
</p>
<div class="code"><pre><I><span class="code-comment">/*******************************************************************
 *
 * Licensed Materials - Property of IBM
 * 
 * AJAX Toolkit Framework 6-28-496-8128
 * 
 * (c) Copyright IBM Corp. 2006 All Rights Reserved.
 * 
 * U.S. Government Users Restricted Rights - Use, duplication or 
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 *
 *******************************************************************/</span></I>
<B><span class="code-lang">package</span></B> org.eclipse.atf.mozilla.ide.core;

<B><span class="code-lang">import</span></B> java.io.File;
<B><span class="code-lang">import</span></B> java.io.FileNotFoundException;
<B><span class="code-lang">import</span></B> java.io.IOException;

<B><span class="code-lang">import</span></B> org.mozilla.xpcom.IAppFileLocProvider;

<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> LocationProvider <B><span class="code-lang">implements</span></B> IAppFileLocProvider {

        <B><span class="code-lang">private</span></B> File libXULPath;
        <B><span class="code-lang">private</span></B> File profile;
        <B><span class="code-lang">private</span></B> File history;
        
        <B><span class="code-lang">public</span></B> LocationProvider(File aBinPath, File aProfileDir)
        <B><span class="code-lang">throws</span></B> IOException {
                libXULPath = aBinPath;
                profile = aProfileDir;

                <B><span class="code-lang">if</span></B> (!libXULPath.exists() || !libXULPath.isDirectory()) {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> FileNotFoundException(<B><span class="code-string">&quot;libxul directory specified is not valid: &quot;</span></B>
                                        + libXULPath.getAbsolutePath());
                }
                <B><span class="code-lang">if</span></B> (profile != <B><span class="code-lang">null</span></B> &amp;&amp; (!profile.exists() || !profile.isDirectory())) {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> FileNotFoundException(<B><span class="code-string">&quot;profile directory specified is not valid: &quot;</span></B>
                                        + profile.getAbsolutePath());
                }

                <I><span class="code-comment">// create history file
</span></I>                <B><span class="code-lang">if</span></B> (profile != <B><span class="code-lang">null</span></B>) {
                        setupProfile();
                }
        }
        
        <B><span class="code-lang">private</span></B> <B><span class="code-lang">void</span></B> setupProfile() <B><span class="code-lang">throws</span></B> IOException {
                history = <B><span class="code-lang">new</span></B> File(profile, <B><span class="code-string">&quot;history.dat&quot;</span></B>);
                <B><span class="code-lang">if</span></B> (!history.exists()) {
                        history.createNewFile();
                }
        }

        <B><span class="code-lang">public</span></B> File getFile(String aProp, <B><span class="code-lang">boolean</span></B>[] aPersistent) {
                File file = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">if</span></B> (aProp.equals(<B><span class="code-string">&quot;GreD&quot;</span></B>) || aProp.equals(<B><span class="code-string">&quot;GreComsD&quot;</span></B>)) { <I><span class="code-comment">//$NON-NLS-1$
</span></I><I><span class="code-comment">//                      file = new File(grePath);
</span></I>                        file = libXULPath;
                        <B><span class="code-lang">if</span></B> (aProp.equals(<B><span class="code-string">&quot;GreComsD&quot;</span></B>)) { <I><span class="code-comment">//$NON-NLS-1$
</span></I>                                file = <B><span class="code-lang">new</span></B> File(file, <B><span class="code-string">&quot;components&quot;</span></B>); <I><span class="code-comment">//$NON-NLS-1$
</span></I>                        }
                }
                <B><span class="code-lang">else</span></B> <B><span class="code-lang">if</span></B> (aProp.equals(<B><span class="code-string">&quot;MozBinD&quot;</span></B>) ||  <I><span class="code-comment">//$NON-NLS-1$
</span></I>                        aProp.equals(<B><span class="code-string">&quot;CurProcD&quot;</span></B>) || <I><span class="code-comment">//$NON-NLS-1$
</span></I>                        aProp.equals(<B><span class="code-string">&quot;ComsD&quot;</span></B>))  <I><span class="code-comment">//$NON-NLS-1$
</span></I>                {
                        file = libXULPath;
                        <B><span class="code-lang">if</span></B> (aProp.equals(<B><span class="code-string">&quot;ComsD&quot;</span></B>)) { <I><span class="code-comment">//$NON-NLS-1$
</span></I>                                file = <B><span class="code-lang">new</span></B> File(file, <B><span class="code-string">&quot;components&quot;</span></B>); <I><span class="code-comment">//$NON-NLS-1$
</span></I>                        }
                }
                <B><span class="code-lang">else</span></B> <B><span class="code-lang">if</span></B> (aProp.equals(<B><span class="code-string">&quot;ProfD&quot;</span></B>)) {       <I><span class="code-comment">//$NON-NLS-1$
</span></I>                        <B><span class="code-lang">return</span></B> profile;
                }
                <B><span class="code-lang">else</span></B> <B><span class="code-lang">if</span></B> (aProp.equals(<B><span class="code-string">&quot;UHist&quot;</span></B>)) {       <I><span class="code-comment">//$NON-NLS-1$
</span></I>                        <B><span class="code-lang">return</span></B> history;
                }
<I><span class="code-comment">//              else {
</span></I><I><span class="code-comment">//                      System.err.println(&quot;LocationProvider::getFile() =&gt; unhandled property = &quot; + aProp);
</span></I><I><span class="code-comment">//              }
</span></I>
                <B><span class="code-lang">return</span></B> file;
        }

        <B><span class="code-lang">public</span></B> File[] getFiles(String aProp) {
                File[] files = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">if</span></B> (aProp.equals(<B><span class="code-string">&quot;APluginsDL&quot;</span></B>)) { <I><span class="code-comment">//$NON-NLS-1$
</span></I>                        files = <B><span class="code-lang">new</span></B> File[1];
                        files[0] = <B><span class="code-lang">new</span></B> File(libXULPath, <B><span class="code-string">&quot;plugins&quot;</span></B>);
<I><span class="code-comment">//              } else {
</span></I><I><span class="code-comment">//                      System.err.println(&quot;LocationProvider::getFiles() =&gt; unhandled property = &quot; + aProp);
</span></I>                }

                <B><span class="code-lang">return</span></B> files;
        }

}</pre></div><p>
For more information about ATF, click <a class="ext-link" href="http://www.eclipse.org/atf/"><span class="icon">here</span></a>
</p>
<p>
The initialization of JavaXPCOM for embedding purpouses is shown here:
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.test;

<B><span class="code-lang">import</span></B> java.io.File;
<B><span class="code-lang">import</span></B> java.io.FileNotFoundException;
<B><span class="code-lang">import</span></B> java.io.IOException;
<B><span class="code-lang">import</span></B> java.util.Properties;

<B><span class="code-lang">import</span></B> org.eclipse.atf.mozilla.ide.core.LocationProvider;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.GREVersionRange;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.Mozilla;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.XPCOMException;

<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> EmbeddingInitializationCode {

        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String[] args) {

                <I><span class="code-comment">// JavaXPCOM initialization
</span></I>                GREVersionRange[] range = <B><span class="code-lang">new</span></B> GREVersionRange[1];
                range[0] = <B><span class="code-lang">new</span></B> GREVersionRange(<B><span class="code-string">&quot;1.8&quot;</span></B>, <B><span class="code-lang">true</span></B>, <B><span class="code-string">&quot;1.9+&quot;</span></B>, <B><span class="code-lang">true</span></B>);

                Properties props = <B><span class="code-lang">null</span></B>;
                File grePath = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">try</span></B> {
                        grePath = Mozilla.getGREPathWithProperties (range, props);
                } <B><span class="code-lang">catch</span></B> (FileNotFoundException e) {
                        System.out.println(<B><span class="code-string">&quot;XULRunner not found. It is possible that it be wrong installed&quot;</span></B>);
                        <B><span class="code-lang">return</span></B>;
                }

                Mozilla mozilla = Mozilla.getInstance();
                mozilla.initialize(grePath);
                LocationProvider locProvider;
                <B><span class="code-lang">try</span></B> {
                        locProvider = <B><span class="code-lang">new</span></B> LocationProvider(grePath, grePath);
                } <B><span class="code-lang">catch</span></B> (IOException e) {
                        System.out.println(<B><span class="code-string">&quot;XULRunner not found. It is possible that it be wrong installed&quot;</span></B>);
                        <B><span class="code-lang">return</span></B>;
                }        

                mozilla.initEmbedding(grePath, grePath, locProvider);

                <I><span class="code-comment">// From this line, we can use JavaXPCOM
</span></I>
                System.out.println(<B><span class="code-string">&quot;\n--&gt; initialized\n&quot;</span></B>);
                
                <I><span class="code-comment">// ... your application code ...
</span></I>
                <I><span class="code-comment">// JavaXPOM finalization
</span></I>                <B><span class="code-lang">try</span></B> {
                        mozilla.termEmbedding();
                } <B><span class="code-lang">catch</span></B> (XPCOMException e) {
                        <I><span class="code-comment">// this exception is thrown if termEmbedding failed
</span></I>                }

        }
}</pre></div><h3 id="a3.2BasicConceptsAboutXPCOMComponentsandInterfaces">3.2 Basic Concepts About XPCOM Components and Interfaces</h3>
<p>
XPCOM (Mozilla Cross-platform Object Model) is, as its name suggests, a component based architecture. XPCOM components are typically implemented nativelly. Any component has unique identity within the XPCOM system. XPCOM components implements a number of interfaces, providing functionalities. The same component might implement different interfaces, in the same way, the same interface might be implemented by different components. Because interfaces can't be used without a concrete implementation, we will talk about components and interfaces. In advance, we talk about components as a modular piece of code that implements one or more interfaces.
</p>
<p>
In XULRunner, interfaces name always begin with <tt>nsI</tt>. In JavaXPCOM, for each XPCOM interface, a Java interface is automatically generated. Their names begin with <tt>nsI</tt> and they are located in <tt>org.mozilla.xpcom </tt> Java package. This interfaces are in MozillaInterfaces.jar. The documentation of interfaces in JavaDoc format is available in <a class="missing wiki" href="/wiki/wiki/MozillaInterfaces" rel="nofollow">MozillaInterfaces?</a>-src.jar, and soon it will be available on-line. Moreover, you can browse online a complete reference for all XPCOM interfaces in <a class="ext-link" href="http://developer.mozilla.org/En"><span class="icon">XPCOM reference at MDC</span></a> (Mozilla Developer Center). MDC has a language independent XPCOM documentation, not Java focused.
</p>
<p>
In JavaXPCOM there is no code generation for XPCOM components. Later you will see how instantiate and use components in JavaXPCOM. Because no Java code exists for components, there is not JavaDoc documentation for these. <a class="ext-link" href="http://developer.mozilla.org/En"><span class="icon">XPCOM reference at MDC</span></a> contains a complete on-line documentation about XPCOM components.
</p>
<p>
In general, we can use methods of a XPCOM component following these three steps:
</p>
<ul><li>Get the component (creating it or accesing to created component).
</li><li>Get the part of the component corresponding to the interface that we want to use.
</li><li>Call the function (one or more than one).
</li></ul><p>
Components are named using URI syntax, for example, <tt>@mozilla.org/file/local;1</tt>. Mozilla provided components starts with <tt>@mozilla.org</tt>. That URI is the <tt>contractID</tt>, and every component also has a Component Identifier (<tt>CID</tt>). In the same way, each interface has an Interface Identifier (<tt>IID</tt>). The <tt>IID</tt> can be always obtained in the static public final attribute <tt>NS_I&lt;CLASS_NAME&gt;_IID</tt> of every single Java interface.The components can exist as an object instances or as a singleton services. Usually, services contains the word <tt>Service</tt> or <tt>Manager</tt> in their name.
</p>
<h3 id="a3.3UsingJavaXPCOM:DifferencesandsimilaririeswithXPCOMfromJavaScript">3.3 Using JavaXPCOM: Differences and similariries with XPCOM from <a class="missing wiki" href="/wiki/wiki/JavaScript" rel="nofollow">JavaScript?</a></h3>
<p>
In XPCOM all interfaces inherit from an interface called <tt>nsISupports</tt>, which has one function called <tt>QueryInterface</tt> that returns, for a component, a specific interface of that component or throws an exception if that interface is not supported by the component. In JavaXPCOM, the interface <tt>nsISupports</tt> provides the method <tt>queryInterface</tt> that returs a <tt>nsISupports</tt> object. In order to call methods belonging to a particular interface, you must first indicate that interface using the method <tt>{queryInterface</tt>. 
</p>
<p>
For instance, if you use JavaScript with XPCOM you can create a local file component as follows:
</p>
<pre class="wiki">// Get the component
var aFile = Components.classes["@mozilla.org/file/local;1"].createInstance();

// Get the part of the component corresponding to the interface that we want to use
var aLocalFile = aFile.QueryInterface(Components.interfaces.nsILocalFile);

// Call the function (one or more than one)
aLocalFile.initWithPath("/mozilla/testfile.txt");
</pre><p>
As you can see, we need two JavaScript lines to create a component and get a concrete interface. There is a shortcut to avoid typing the two lines every time we need to create a component:
</p>
<pre class="wiki">// Get the component and directly the part of the component corresponding to the interface that we want to use
var aLocalFile = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);

// Call the function (one or more than one)
aLocalFile.initWithPath("/mozilla/testfile.txt");
</pre><p>
In JavaXPCOM, in order to instantiate the JavaXPCOM objects corresponding to XPCOM components is necessary to access to <tt>ComponentManager</tt> object, which allows the modules access and use at runtime. It can be accessed using <tt>getComponentManager()</tt> method in <tt>Mozilla</tt> singleton class. Every time we instantiate an object in that way, we are creating a XPCOM component. There are two different manners to create an instance of a XPCOM component:
</p>
<p>
By its component ID (<tt>CID</tt>):
</p>
<div class="code"><pre><I><span class="code-comment">// Get the component manager
</span></I>ComponentManager cm = Mozilla.getInstance().getComponentManager();

<I><span class="code-comment">// Get the part of the component corresponding to the interface that we want to use
</span></I>nsISupports obj = cm.createInstance(<B><span class="code-string">&quot;{6ddb050c-0d04-11d4-986e-00c04fa0cf4a}&quot;</span></B>, <B><span class="code-lang">null</span></B>, nsISupports.NS_ISUPPORTS_IID);

<I><span class="code-comment">// Get the part of the component corresponding to the interface that we want to use
</span></I>nsIInputStreamChannel isc = obj.queryInterface(nsIInputStreamChannel.NS_IINPUTSTREAMCHANNEL_IID);

<I><span class="code-comment">// Call the method (one or more than one)
</span></I>System.out.println(<B><span class="code-string">&quot;Content-Length: &quot;</span></B> + isc.getContentLength());</pre></div><p>
We can also use this compact form with component ID (<tt>CID</tt>):
</p>
<div class="code"><pre><I><span class="code-comment">// Get the component manager
</span></I>ComponentManager cm = Mozilla.getInstance().getComponentManager();

<I><span class="code-comment">// Get the part of the component corresponding to the interface that we want to use
</span></I>nsIInputStreamChannel isc = (nsIInputStreamChannel)
         cm.createInstance(<B><span class="code-string">&quot;{6ddb050c-0d04-11d4-986e-00c04fa0cf4a}&quot;</span></B>, <B><span class="code-lang">null</span></B>, nsIInputStreamChannel.NS_IINPUTSTREAMCHANNEL_IID);

<I><span class="code-comment">// Call the method (one or more than one)
</span></I>System.out.println(<B><span class="code-string">&quot;Content-Length: &quot;</span></B> + isc.getContentLength());</pre></div><p>
By its <tt>contractID</tt>:
</p>
<div class="code"><pre><I><span class="code-comment">// Get the component manager
</span></I>ComponentManager cm = Mozilla.getInstance().getComponentManager();

<I><span class="code-comment">// Get the part of the component corresponding to the interface that we want to use
</span></I>nsISupports obj = cm.createInstanceByContractID(<B><span class="code-string">&quot;@ mozilla.org/file/local;1&quot;</span></B>, <B><span class="code-lang">null</span></B>, nsISupports.NS_ISUPPORTS_IID);

<I><span class="code-comment">// Get the part of the component corresponding to the interface that we want to use
</span></I>nsILocalFile file = obj.queryInterface(nsILocalFile.NS_ILOCALFILE_IID);

<I><span class="code-comment">// Call the method (one or more than one)
</span></I>file.initWithPath(<B><span class="code-string">&quot;/home/alpgarcia/xpcom-file-test.txt&quot;</span></B>);</pre></div><p>
Of course, again we can use the compact form:
</p>
<div class="code"><pre><I><span class="code-comment">// Get the component manager
</span></I>ComponentManager cm = Mozilla.getInstance().getComponentManager();

<I><span class="code-comment">// Get the part of the component corresponding to the interface that we want to use
</span></I>nsILocalFile file = (nsILocalFile)cm.createInstanceByContractID(<B><span class="code-string">&quot;@ mozilla.org/file/local;1&quot;</span></B>, <B><span class="code-lang">null</span></B>, nsILocalFile.NS_ILOCALFILE_IID);

<I><span class="code-comment">// Call the method (one or more than one)
</span></I>file.initWithPath(<B><span class="code-string">&quot;/home/alpgarcia/xpcom-file-test.txt&quot;</span></B>);</pre></div><p>
In Javascript we can check if a component implements a specific interface calling the operator <tt>instanceOf</tt>.
</p>
<pre class="wiki">var aFile = Components.classes["@mozilla.org/file/local;1"].createInstance();
if (aFile instanceOf Components.interfaces.nsILocalFile){
   var aLocalFile = aFile.QueryInterface(Components.interfaces.nsILocalFile);
   ...
}
</pre><p>
In Java, the <tt>instanceof</tt> operator semantics is different than <tt>instanceOf</tt> JavaScript operator. In Java the only way to know if a component implements a XPCOM interface is invoke <tt>queryInterface(...)</tt> method. If method call fails, the component don't implement the XPCOM interface. If we make an example similar to last JavaScript example, we will obtain diferent results because semantics are diferent in JavaScript and Java. Try the following code to check by yourself:
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.test;


<B><span class="code-lang">import</span></B> java.io.File;
<B><span class="code-lang">import</span></B> java.io.FileNotFoundException;
<B><span class="code-lang">import</span></B> java.util.Properties;

<B><span class="code-lang">import</span></B> org.mozilla.xpcom.GREVersionRange;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.Mozilla;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.XPCOMException;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIComponentManager;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsILocalFile;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIMutableArray;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsISupports;

<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> InstanceOfTest {

        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String[] args) {

                <I><span class="code-comment">// JavaXPCOM initialization
</span></I>                GREVersionRange[] range = <B><span class="code-lang">new</span></B> GREVersionRange[1];
                range[0] = <B><span class="code-lang">new</span></B> GREVersionRange(<B><span class="code-string">&quot;1.8&quot;</span></B>, <B><span class="code-lang">true</span></B>, <B><span class="code-string">&quot;1.9+&quot;</span></B>, <B><span class="code-lang">true</span></B>);

                Properties props = <B><span class="code-lang">null</span></B>;
                File grePath = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">try</span></B> {
                        grePath = Mozilla.getGREPathWithProperties(range, props);
                } <B><span class="code-lang">catch</span></B> (FileNotFoundException e) {
                        System.out
                                .println(<B><span class="code-string">&quot;XULRunner not found. It is possible that it be wrong installed&quot;</span></B>);
                        <B><span class="code-lang">return</span></B>;
                }

                Mozilla mozilla = Mozilla.getInstance();
                mozilla.initialize(grePath);

                <B><span class="code-lang">try</span></B> {
                        mozilla.initXPCOM(grePath, <B><span class="code-lang">null</span></B>);

                } <B><span class="code-lang">catch</span></B> (Throwable t) {
                        System.out.println(<B><span class="code-string">&quot;initXPCOM failed&quot;</span></B>);
                        t.printStackTrace();
                        <B><span class="code-lang">return</span></B>;
                }
                <I><span class="code-comment">// From this line, we can use JavaXPCOM
</span></I>
                <I><span class="code-comment">// Get the component manager
</span></I>                nsIComponentManager cm = Mozilla.getInstance().getComponentManager();

                <I><span class="code-comment">// We will not be able to know if that component implements a given
</span></I>                <I><span class="code-comment">// interface using instanceof in Java
</span></I>                nsISupports aFile = cm
                                .createInstanceByContractID(<B><span class="code-string">&quot;@mozilla.org/file/local;1&quot;</span></B>, <B><span class="code-lang">null</span></B>,
                                                nsISupports.NS_ISUPPORTS_IID);
                <B><span class="code-lang">if</span></B> (aFile <B><span class="code-lang">instanceof</span></B> nsILocalFile) {
                        <I><span class="code-comment">// The execution flow never come this way because instanceof
</span></I>                        <I><span class="code-comment">// semantics are diferent in JavaScript and Java
</span></I>                        <I><span class="code-comment">// (nsILocalFile is a chid class of nsISupports and not
</span></I>                        <I><span class="code-comment">// the other way round)
</span></I>                        nsILocalFile aLocalFile = (nsILocalFile) aFile
                                        .queryInterface(nsILocalFile.NS_ILOCALFILE_IID);
                        System.out.println(<B><span class="code-string">&quot;This message will never be printed.&quot;</span></B>);
                }

                <B><span class="code-lang">try</span></B> {
                        nsILocalFile aLocalFile = (nsILocalFile) aFile
                                        .queryInterface(nsILocalFile.NS_ILOCALFILE_IID);
                        <I><span class="code-comment">// The next sentences are executed if aFile component implements
</span></I>                        <I><span class="code-comment">// nsILocalFile interface
</span></I>                        System.out
                                        .println(<B><span class="code-string">&quot;nsILocalFile interface implemented by this component.&quot;</span></B>);

                        <I><span class="code-comment">// Try to get an exception caused by a non implemented interface
</span></I>                        nsIMutableArray arr = (nsIMutableArray) aFile
                                        .queryInterface(nsIMutableArray.NS_IMUTABLEARRAY_IID);
                        System.out.println(<B><span class="code-string">&quot;This message will never be printed.&quot;</span></B>);

                } <B><span class="code-lang">catch</span></B> (XPCOMException ex) {
                        <I><span class="code-comment">// The next sentences are executed if aFile component don't
</span></I>                        <I><span class="code-comment">// implement nsILocalFile interface
</span></I>                        System.err
                                        .println(<B><span class="code-string">&quot;Interface not supported. See the following exception: &quot;</span></B>);
                        ex.printStackTrace();
                        System.err.flush();
                }

                <I><span class="code-comment">// The inverse case matchs with the semantics of Java instanceof
</span></I>                <I><span class="code-comment">// operator
</span></I>                nsILocalFile aLocalFile = (nsILocalFile) aFile
                                .queryInterface(nsILocalFile.NS_ILOCALFILE_IID);
                <B><span class="code-lang">if</span></B> (aLocalFile <B><span class="code-lang">instanceof</span></B> nsISupports) {
                        <I><span class="code-comment">// The next sentence will be executed
</span></I>                        System.out.println(<B><span class="code-string">&quot;aLocalFile instance of nsISupports&quot;</span></B>);
                }

                <I><span class="code-comment">// JavaXPOM finalization
</span></I>                mozilla.shutdownXPCOM(<B><span class="code-lang">null</span></B>);
        }
}
</pre></div><p>
The main difference between JavaScript and Java is that, in JavaXPCOM, there isn't a unique Java object for each XPCOM component. There is a Java object for each interface implemented by the component. 
</p>
<p>
Moreover, we can use another type of components, called services. Previously we said that a Service exists as a singleton, in other words, you can only instantiate it once. Services are used to get or set global data or perform operations on other objects. The proccess to create a service in JavaScript is very similar to the component instance one, changing the <tt>getInstance()</tt> function call by a call to <tt>getService()</tt>, as we will see in the examples below. In JavaXPCOM we need the <tt>nsIServiceManager</tt> object to instantiate a service. Then you must call <tt>getService</tt> or <tt>getServiceByContractID</tt> <strong>to get a reference</strong> to the service component.
</p>
<p>
With JavaScript we can employ the following code:
</p>
<pre class="wiki">// get the dns service component in JavaScript 
var dnsservice = Components.classes["@mozilla.org/network/dns-service;1"].getService(); 
dnsservice.QueryInterface(Components.interfaces.nsIDNSService);
</pre><p>
While using JavaXPCOM, the equivalent form is:
</p>
<div class="code"><pre><I><span class="code-comment">//Now, we will try to use a service, for example, dns service
</span></I>nsIServiceManager sm = mozilla.getServiceManager();
                                
nsIDNSService dns = (nsIDNSService) sm.getServiceByContractID(
        <B><span class="code-string">&quot;@mozilla.org/network/dns-service;1&quot;</span></B>, nsIDNSService.NS_IDNSSERVICE_IID);</pre></div><h3 id="a3.4FullexamplesofXPCOMComponentsandServicesfromJavaXPCOM">3.4 Full examples of XPCOM Components and Services from JavaXPCOM</h3>
<p>
In the first example we are going to create a local file and write some text into using an output stream.
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.test;

<B><span class="code-lang">import</span></B> java.io.File;
<B><span class="code-lang">import</span></B> java.io.FileNotFoundException;
<B><span class="code-lang">import</span></B> java.util.Properties;

<B><span class="code-lang">import</span></B> org.mozilla.xpcom.GREVersionRange;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.Mozilla;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIComponentManager;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIFileInputStream;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIFileOutputStream;
<I><span class="code-comment">//import org.mozilla.interfaces.nsILineInputStream;
</span></I><B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsILocalFile;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsISeekableStream;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsISupports;



<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> FileTest {

        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String[] args) {

                <I><span class="code-comment">// JavaXPCOM initialization
</span></I>                GREVersionRange[] range = <B><span class="code-lang">new</span></B> GREVersionRange[1];
                range[0] = <B><span class="code-lang">new</span></B> GREVersionRange(<B><span class="code-string">&quot;1.8&quot;</span></B>, <B><span class="code-lang">true</span></B>, <B><span class="code-string">&quot;1.9+&quot;</span></B>, <B><span class="code-lang">true</span></B>);

                Properties props = <B><span class="code-lang">null</span></B>;
                File grePath = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">try</span></B> {
                        grePath = Mozilla.getGREPathWithProperties(range, props);
                } <B><span class="code-lang">catch</span></B> (FileNotFoundException e) {
                        System.out
                                .println(<B><span class="code-string">&quot;XULRunner not found. It is possible that it be wrong installed&quot;</span></B>);
                        <B><span class="code-lang">return</span></B>;
                }

                Mozilla mozilla = Mozilla.getInstance();
                mozilla.initialize(grePath);

                <B><span class="code-lang">try</span></B> {
                        mozilla.initXPCOM(grePath, <B><span class="code-lang">null</span></B>);

                } <B><span class="code-lang">catch</span></B> (Throwable t) {
                        System.out.println(<B><span class="code-string">&quot;initXPCOM failed&quot;</span></B>);
                        t.printStackTrace();
                        <B><span class="code-lang">return</span></B>;
                }

                <I><span class="code-comment">// From this line, we can use JavaXPCOM
</span></I>
                <I><span class="code-comment">// First, we will create an empty file
</span></I>
                <I><span class="code-comment">// A file is a component, we use the component manager to create an
</span></I>                <I><span class="code-comment">// instance
</span></I>                <I><span class="code-comment">// of local file component
</span></I>                nsIComponentManager cm = mozilla.getComponentManager();

                <I><span class="code-comment">// Here we create directly a component and use its nsILocalFile
</span></I>                <I><span class="code-comment">// interface
</span></I>                nsILocalFile file = (nsILocalFile) cm.createInstanceByContractID(
                                <B><span class="code-string">&quot;@mozilla.org/file/local;1&quot;</span></B>, <B><span class="code-lang">null</span></B>,
                                nsILocalFile.NS_ILOCALFILE_IID);
                file.initWithPath(<B><span class="code-string">&quot;/home/sevi/xpcom-file-test.txt&quot;</span></B>);
                <I><span class="code-comment">// Check file existence because if the file already exists in filesystem
</span></I>                <I><span class="code-comment">// and
</span></I>                <I><span class="code-comment">// we try to create another one with the same path, an exception will be
</span></I>                <I><span class="code-comment">// thrown by XPCOM
</span></I>                <I><span class="code-comment">// (something like &quot;The function &quot;create&quot; returned an error condition
</span></I>                <I><span class="code-comment">// (0x80520008)&quot;)
</span></I>                <B><span class="code-lang">if</span></B> (!file.exists()) {
                        file.create(nsILocalFile.NORMAL_FILE_TYPE, 0600);
                }

                <I><span class="code-comment">// We can create a stream to write the file
</span></I>                nsIFileOutputStream os = (nsIFileOutputStream) cm
                                .createInstanceByContractID(
                                                <B><span class="code-string">&quot;@mozilla.org/network/file-output-stream;1&quot;</span></B>, <B><span class="code-lang">null</span></B>,
                                                nsIFileOutputStream.NS_IFILEOUTPUTSTREAM_IID);
                os.init(file, nsISeekableStream.NS_SEEK_END, 0, 0);
                os.write(<B><span class="code-string">&quot;Hello World!\n&quot;</span></B>, 13);
                os.flush();
                os.close();

                <I><span class="code-comment">// And now we will use an input stream to read the file
</span></I>                <I><span class="code-comment">// The @mozilla.org/network/file-input-stream;1 component implements the
</span></I>                <I><span class="code-comment">// following interfaces:
</span></I>                <I><span class="code-comment">// * nsIFileInputStream
</span></I>                <I><span class="code-comment">// * nsIInputStream
</span></I>                <I><span class="code-comment">// * nsILineInputStream
</span></I>                <I><span class="code-comment">// * nsISeekableStream
</span></I>                <I><span class="code-comment">// * nsISupports
</span></I>                <I><span class="code-comment">// First create a parent component (top parent component). We could use
</span></I>                <I><span class="code-comment">// another component
</span></I>                <I><span class="code-comment">// implemented interface as well.
</span></I>                nsISupports is = cm.createInstanceByContractID(
                                <B><span class="code-string">&quot;@mozilla.org/network/file-input-stream;1&quot;</span></B>, <B><span class="code-lang">null</span></B>,
                                nsISupports.NS_ISUPPORTS_IID);

                <I><span class="code-comment">// We will use the file input stream interface to associate a local file
</span></I>                <I><span class="code-comment">// with the stream
</span></I>                nsIFileInputStream fis = (nsIFileInputStream) is
                                .queryInterface(nsIFileInputStream.NS_IFILEINPUTSTREAM_IID);
                fis.init(file, nsIFileInputStream.REOPEN_ON_REWIND, 0, 0);
                System.out.println(<B><span class="code-string">&quot;The file contains &quot;</span></B> + fis.available()
                                + <B><span class="code-string">&quot; bytes of data.&quot;</span></B>);


                fis.close();

                <I><span class="code-comment">// JavaXPOM finalization
</span></I>                mozilla.shutdownXPCOM(<B><span class="code-lang">null</span></B>);

                System.out.println(<B><span class="code-string">&quot;Finish!&quot;</span></B>);

        }

}</pre></div><p>
Next, a service is used to get some information about domain names:
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.test;

<B><span class="code-lang">import</span></B> java.io.File;
<B><span class="code-lang">import</span></B> java.io.FileNotFoundException;
<B><span class="code-lang">import</span></B> java.util.Properties;

<B><span class="code-lang">import</span></B> org.mozilla.xpcom.GREVersionRange;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.Mozilla;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.*;

<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> ServiceTest {

        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String[] args) {

                <I><span class="code-comment">// JavaXPCOM initialization
</span></I>                GREVersionRange[] range = <B><span class="code-lang">new</span></B> GREVersionRange[1];
                range[0] = <B><span class="code-lang">new</span></B> GREVersionRange(<B><span class="code-string">&quot;1.8&quot;</span></B>, <B><span class="code-lang">true</span></B>, <B><span class="code-string">&quot;1.9+&quot;</span></B>, <B><span class="code-lang">true</span></B>);

                Properties props = <B><span class="code-lang">null</span></B>;
                File grePath = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">try</span></B> {
                        grePath = Mozilla.getGREPathWithProperties(range, props);
                } <B><span class="code-lang">catch</span></B> (FileNotFoundException e) {
                        System.out
                                        .println(<B><span class="code-string">&quot;XULRunner not found. It is possible that it be wrong installed&quot;</span></B>);
                        <B><span class="code-lang">return</span></B>;
                }

                Mozilla mozilla = Mozilla.getInstance();
                mozilla.initialize(grePath);
                
                
                <B><span class="code-lang">try</span></B> {
                        mozilla.initXPCOM(grePath, <B><span class="code-lang">null</span></B>);

                } <B><span class="code-lang">catch</span></B> (Throwable t) {
                        System.out.println(<B><span class="code-string">&quot;initXPCOM failed&quot;</span></B>);
                        t.printStackTrace();
                        <B><span class="code-lang">return</span></B>;
                }

                <I><span class="code-comment">// From this line, we can use JavaXPCOM
</span></I>
                <I><span class="code-comment">// Now, we will try to use a service, for instance, dns service
</span></I>                nsIServiceManager sm = mozilla.getServiceManager();

                nsIDNSService dns = (nsIDNSService) sm.getServiceByContractID(
                                <B><span class="code-string">&quot;@mozilla.org/network/dns-service;1&quot;</span></B>,
                                nsIDNSService.NS_IDNSSERVICE_IID);

                System.out.println(<B><span class="code-string">&quot;Hostname: &quot;</span></B> + dns.getMyHostName());
                nsIDNSRecord dnsRecord = dns.resolve(<B><span class="code-string">&quot;www.google.es&quot;</span></B>,
                                nsIDNSService.RESOLVE_CANONICAL_NAME
                                                | nsIDNSService.RESOLVE_BYPASS_CACHE);
                System.out.println(<B><span class="code-string">&quot;Canonical Name: &quot;</span></B> + dnsRecord.getCanonicalName()
                                + <B><span class="code-string">&quot; -- Next Address: &quot;</span></B> + dnsRecord.getNextAddrAsString());

                <I><span class="code-comment">// JavaXPOM finalization
</span></I>                mozilla.shutdownXPCOM(<B><span class="code-lang">null</span></B>);

                System.out.println(<B><span class="code-string">&quot;Finish!&quot;</span></B>);

        }

}</pre></div><h2 id="a4.EmbeddingFirefox3browserinJava">4. Embedding Firefox 3 browser in Java</h2>
<p>
Is the moment to jump to a more useful examples. First, we are going to embed a mozilla browser in a Java application using SWT. Today, we can use the org.eclipse.swt.browser.Browser class and we can instantiate it doing: browser = new Browser(shell, SWT.MOZILLA);. A time ago, we needed to use the ATF project, and
we had to apply some changes to ATF plug-in source. Fortunately, now we don't have to patch anything. 
</p>
<p>
If you wish, you can download all the examples for chapters 4 to 7 <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-src.zip">here</a>. Also, you can download the <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-bin-win.zip">windows binaries</a> or the <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-bin-linux.zip">linux binaries</a>.
</p>
<h3 id="a4.1Configuringyourenvironment">4.1 Configuring your environment</h3>
<p>
To embed Mozilla browser in a Java application we will use SWT to create the window and embed the browser. For detailed instructions about SWT, please, read the following subsections.
</p>
<h4 id="a4.1.1InstallingSWT">4.1.1 Installing SWT</h4>
<p>
First we need to configure SWT library in order to compile source code, as well as to execute the examples, due to SWT uses native libraries. You can download SWT from <a class="ext-link" href="http://www.eclipse.org/swt/"><span class="icon">its project page</span></a>. If you are using windows, you can download direcltly from <a class="ext-link" href="http://www.eclipse.org/downloads/download.php?file=/eclipse/downloads/drops/R-3.4-200806172000/swt-3.4-win32-win32-x86.zip&amp;url=http://www.mirrorservice.org/sites/download.eclipse.org/eclipseMirror/eclipse/downloads/drops/R-3.4-200806172000/swt-3.4-win32-win32-x86.zip&amp;mirror_id=96"><span class="icon">this link</span></a> or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/swt-3.4-win32-win32-x86.zip">from our page</a>, for GNU/Linux you can use <a class="ext-link" href="http://www.eclipse.org/downloads/download.php?file=/eclipse/downloads/drops/R-3.4-200806172000/swt-3.4-gtk-linux-x86.zip&amp;url=http://eclipse.mirror.kangaroot.net/eclipse/downloads/drops/R-3.4-200806172000/swt-3.4-gtk-linux-x86.zip&amp;mirror_id=468"><span class="icon">this link</span></a> or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/swt-3.4-gtk-linux-x86.zip">from our page</a>.<br />
</p>
<ul><li>The compressed file contains <tt>swt.jar</tt>, which must be added to your <tt>CLASSPATH</tt><br />
</li><li>Also, we need to add the library files path to our <tt>java.library.path</tt><br />
</li></ul><h4 id="a4.1.1ConfiguringSWT">4.1.1 Configuring SWT</h4>
<p>
If you are using Eclipse IDE, you can follow <a class="ext-link" href="http://www.eclipse.org/swt/eclipse.php"><span class="icon">this instructions</span></a> for use SWT.
</p>
<p>
Also, you can create a jar file containing the needed packages. To compile them you must add to your <tt>CLASSPATH</tt> the next entries:
</p>
<ul><li><strong>javaxpcom.jar</strong>: For more information about where you can find that jar, please, read section 2 from this guide.
</li><li><strong>MozillaInterfaces.jar</strong>: For more information about where you can find that jar, please, read section 2 from this guide.
</li><li><strong>MozillaGlue.jar</strong>: For more information about where you can find that jar, please, read section 2 from this guide.
</li><li><strong>swt.jar</strong>: For more information about where you can find that jar, please, read section 4.1.1 from this guide.
</li><li><strong>src.zip</strong>: You can find it in the SWT zip downloaded before.
</li></ul><p>
  
</p>
<blockquote>
<p>
With these files, you we can obtain the advenatages of using SWT. 
</p>
</blockquote>
<h3 id="a4.2WebBrowserExample">4.2 Web Browser Example</h3>
<p>
Now we can write a simple web browser combining the SWT Library and the patched Mozilla Browser. The next code shows how you can create a MozillaBrowser object embedding into a SWT window.
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.browser;

<B><span class="code-lang">import</span></B> org.eclipse.swt.SWT;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressEvent;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressListener;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Display;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Shell;

<B><span class="code-lang">import</span></B> org.mozilla.interfaces.*;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.Browser;
<B><span class="code-lang">import</span></B> org.eclipse.swt.SWTError;

<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> SimpleBrowser {

        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String args[]) {
                
                        <B><span class="code-lang">final</span></B> Browser browser;
                Display display = <B><span class="code-lang">new</span></B> Display();
                Shell shell = <B><span class="code-lang">new</span></B> Shell(display);

                shell.setSize(800, 600);
                shell.open();
                
                <I><span class="code-comment">//Initiating the browser using SWT
</span></I>
                <B><span class="code-lang">try</span></B> {
                                browser = <B><span class="code-lang">new</span></B> Browser(shell, SWT.MOZILLA);
                        } <B><span class="code-lang">catch</span></B> (SWTError e) {
                                System.out.println(<B><span class="code-string">&quot;Could not instantiate Browser: &quot;</span></B> + e.getMessage());
                                <B><span class="code-lang">return</span></B>;
                        }
                
               
                
                <I><span class="code-comment">// Adapt browser size to shell size
</span></I>                browser.setBounds(shell.getClientArea());

                <I><span class="code-comment">// Load an URL into the web browser
</span></I>                browser.setUrl(<B><span class="code-string">&quot;http://www.google.com&quot;</span></B>);
                
                <I><span class="code-comment">// Listens for page loading status.
</span></I>                browser.addProgressListener(<B><span class="code-lang">new</span></B> ProgressListener() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> changed(ProgressEvent event) {
                        }

                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> completed(ProgressEvent event) {
                                nsIWebBrowser webBrowser = (nsIWebBrowser)browser.getWebBrowser();
                                nsIDOMWindow window = webBrowser.getContentDOMWindow();
                                nsIDOMDocument document = window.getDocument();
                                System.out.println(document);
                        }
                });

                <B><span class="code-lang">while</span></B> (!shell.isDisposed()) {
                        <B><span class="code-lang">if</span></B> (!display.readAndDispatch()) {
                                display.sleep();
                        }
                }
        }
}
</pre></div><p>
Next we add some SWT widgets to manage some common user interactions like URL typing, backward and forward buttons, menu bar, page reloading, stop page loading, etc. Moreover, we support the two types of MozillaBrowser initialization:<br />
</p>
<ul><li>You can pass an argument in the command line to specify XULRunner path.
</li><li>You can execute the application with no arguments to use a previously installed XULRunner version.
</li></ul><p>
The following source code shows an implementation of a typical web browser with some buttons, taking advantage of SWT widgets. Moreover, it is prepared to execute using <i>jnlp</i>, reason why we include code trying to launcch <tt>MozillaBrowser</tt> with a previous XULRunner installation, if fails, try with a given path, that can be passed as a program argument or as a sytem property, called <tt>"xulrunner.dirname"</tt>, via <i>jnlp</i>.
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.browser;

<B><span class="code-lang">import</span></B> java.io.IOException;
<B><span class="code-lang">import</span></B> java.io.InputStream;

<B><span class="code-lang">import</span></B> org.eclipse.swt.SWT;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.Browser;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressEvent;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressListener;
<B><span class="code-lang">import</span></B> org.eclipse.swt.events.SelectionAdapter;
<B><span class="code-lang">import</span></B> org.eclipse.swt.events.SelectionEvent;
<B><span class="code-lang">import</span></B> org.eclipse.swt.events.SelectionListener;
<B><span class="code-lang">import</span></B> org.eclipse.swt.graphics.Image;
<B><span class="code-lang">import</span></B> org.eclipse.swt.graphics.ImageData;
<B><span class="code-lang">import</span></B> org.eclipse.swt.layout.GridData;
<B><span class="code-lang">import</span></B> org.eclipse.swt.layout.GridLayout;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Canvas;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Combo;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Display;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Menu;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.MenuItem;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Shell;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.ToolBar;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.ToolItem;

<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> LadyrBrowser {

        <B><span class="code-lang">private</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">final</span></B> <B><span class="code-lang">int</span></B> WIDTH = 800;

        <B><span class="code-lang">private</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">final</span></B> <B><span class="code-lang">int</span></B> HEIGHT = 600;
        
        Browser browser;

        <B><span class="code-lang">private</span></B> Combo uriCombo;

        <B><span class="code-lang">private</span></B> <B><span class="code-lang">final</span></B> ToolItem backItem;

        <B><span class="code-lang">private</span></B> <B><span class="code-lang">final</span></B> ToolItem forwardItem;

        <I><span class="code-comment">/**
         * 
         * @param xulrunnerPath if you have a XULRunner valid version in your system, but not
         *      installed, you can use that version to run the browser. This param must contain
         *      its path, or null in other case.
         */</span></I>
        <B><span class="code-lang">public</span></B> LadyrBrowser(String xulrunnerPath) {
                Display display = <B><span class="code-lang">new</span></B> Display();
                Shell shell = <B><span class="code-lang">new</span></B> Shell(display);
                shell.setSize(WIDTH, HEIGHT);

                
                
                GridLayout gridLayout = <B><span class="code-lang">new</span></B> GridLayout(1, <B><span class="code-lang">true</span></B>);
                shell.setLayout(gridLayout);

                <I><span class="code-comment">// Set the menu bar
</span></I>                <I><span class="code-comment">// create the menu
</span></I>                Menu menuBar = <B><span class="code-lang">new</span></B> Menu(shell, SWT.BAR);

                <I><span class="code-comment">// create a file menu and add an exit item
</span></I>                <B><span class="code-lang">final</span></B> MenuItem file = <B><span class="code-lang">new</span></B> MenuItem(menuBar, SWT.CASCADE);
                file.setText(<B><span class="code-string">&quot;&amp;File&quot;</span></B>);
                <B><span class="code-lang">final</span></B> Menu filemenu = <B><span class="code-lang">new</span></B> Menu(shell, SWT.DROP_DOWN);
                file.setMenu(filemenu);
                <B><span class="code-lang">final</span></B> MenuItem exitMenuItem = <B><span class="code-lang">new</span></B> MenuItem(filemenu, SWT.PUSH);
                exitMenuItem.setText(<B><span class="code-string">&quot;&amp;Exit\tCTRL+E&quot;</span></B>);
                exitMenuItem.setAccelerator(SWT.CTRL + <B><span class="code-string">'E'</span></B>);
                exitMenuItem.addSelectionListener(<B><span class="code-lang">new</span></B> SelectionAdapter() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetSelected(SelectionEvent event) {
                                System.exit(0);
                        }
                });

                <I><span class="code-comment">// create a Help menu and add an about item
</span></I>                <B><span class="code-lang">final</span></B> MenuItem helpMenuItem = <B><span class="code-lang">new</span></B> MenuItem(menuBar, SWT.CASCADE);
                helpMenuItem.setText(<B><span class="code-string">&quot;&amp;Help&quot;</span></B>);
                <B><span class="code-lang">final</span></B> Menu helpmenu = <B><span class="code-lang">new</span></B> Menu(shell, SWT.DROP_DOWN);
                helpMenuItem.setMenu(helpmenu);
                <B><span class="code-lang">final</span></B> MenuItem aboutMenuItem = <B><span class="code-lang">new</span></B> MenuItem(helpmenu, SWT.PUSH);
                aboutMenuItem.setText(<B><span class="code-string">&quot;&amp;About&quot;</span></B>);

                shell.setMenuBar(menuBar);

                <I><span class="code-comment">// Set the toolbar
</span></I>                ToolBar toolbar = <B><span class="code-lang">new</span></B> ToolBar(shell, SWT.FLAT);

                backItem = <B><span class="code-lang">new</span></B> ToolItem(toolbar, SWT.PUSH);
                backItem.setImage(getImage(<B><span class="code-string">&quot;resources/back.png&quot;</span></B>));
                backItem.setEnabled(<B><span class="code-lang">false</span></B>);

                forwardItem = <B><span class="code-lang">new</span></B> ToolItem(toolbar, SWT.PUSH);
                forwardItem.setImage(getImage(<B><span class="code-string">&quot;resources/forward.png&quot;</span></B>));
                forwardItem.setEnabled(<B><span class="code-lang">false</span></B>);

                backItem.addSelectionListener(<B><span class="code-lang">new</span></B> SelectionAdapter() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetSelected(SelectionEvent event) {
                                <B><span class="code-lang">if</span></B> (browser.isBackEnabled()) {
                                        browser.back();
                                }
                        }
                });

                forwardItem.addSelectionListener(<B><span class="code-lang">new</span></B> SelectionAdapter() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetSelected(SelectionEvent event) {
                                <B><span class="code-lang">if</span></B> (browser.isForwardEnabled()) {
                                        browser.forward();
                                }
                        }
                });

                <B><span class="code-lang">final</span></B> ToolItem refreshItem = <B><span class="code-lang">new</span></B> ToolItem(toolbar, SWT.PUSH);
                refreshItem.setImage(getImage(<B><span class="code-string">&quot;resources/refresh.png&quot;</span></B>));
                refreshItem.addSelectionListener(<B><span class="code-lang">new</span></B> SelectionAdapter() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetSelected(SelectionEvent event) {
                                browser.refresh();
                        }
                });

                <B><span class="code-lang">final</span></B> ToolItem stopItem = <B><span class="code-lang">new</span></B> ToolItem(toolbar, SWT.PUSH);
                stopItem.setImage(getImage(<B><span class="code-string">&quot;resources/stop.png&quot;</span></B>));
                stopItem.addSelectionListener(<B><span class="code-lang">new</span></B> SelectionAdapter() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetSelected(SelectionEvent event) {
                                browser.stop();
                        }
                });

                uriCombo = <B><span class="code-lang">new</span></B> Combo(toolbar, SWT.NONE);
                uriCombo.setItems(<B><span class="code-lang">new</span></B> String[] { <B><span class="code-string">&quot;www.ladyr.com&quot;</span></B>, <B><span class="code-string">&quot;www.urjc.es&quot;</span></B>,
                                <B><span class="code-string">&quot;www.mozilla.org&quot;</span></B> });
                uriCombo.setText(<B><span class="code-string">&quot;http://www.google.es&quot;</span></B>);
                uriCombo.setBounds(0, 0, 3 * (WIDTH / 4), 0);
                uriCombo.addSelectionListener(<B><span class="code-lang">new</span></B> SelectionListener() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetSelected(SelectionEvent e) {
                                Combo c = (Combo) e.widget;
                                browser.setUrl(c.getText());
                                System.out.println(c.getText());
                        }

                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetDefaultSelected(SelectionEvent e) {
                                Combo c = (Combo) e.widget;
                                browser.setUrl(c.getText());
                                System.out.println(c.getText());
                        }
                });

                <B><span class="code-lang">final</span></B> ToolItem uriComboItem = <B><span class="code-lang">new</span></B> ToolItem(toolbar, SWT.SEPARATOR);
                uriComboItem.setWidth(uriCombo.getSize().x);
                uriComboItem.setControl(uriCombo);

                <B><span class="code-lang">final</span></B> ToolItem goItem = <B><span class="code-lang">new</span></B> ToolItem(toolbar, SWT.PUSH);
                goItem.setImage(getImage(<B><span class="code-string">&quot;resources/go.png&quot;</span></B>));
                goItem.addSelectionListener(<B><span class="code-lang">new</span></B> SelectionAdapter() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetSelected(SelectionEvent event) {
                                browser.setUrl(uriCombo.getText());
                        }
                });

                GridData data = <B><span class="code-lang">new</span></B> GridData();
                data.horizontalAlignment = SWT.FILL;
                toolbar.setLayoutData(data);

                toolbar.pack();

                <I><span class="code-comment">// Set the page visualization area
</span></I>
                Canvas canvas = <B><span class="code-lang">new</span></B> Canvas(shell, SWT.BORDER);
                data = <B><span class="code-lang">new</span></B> GridData();
                <I><span class="code-comment">// Set the same dimensions than shell, after we will call pack method
</span></I>                <I><span class="code-comment">// to fit the canvas size to the shell size.
</span></I>                data.horizontalAlignment = SWT.FILL;
                data.verticalAlignment = SWT.FILL;
                data.widthHint = WIDTH;
                data.heightHint = HEIGHT;
                canvas.setLayoutData(data);

                shell.pack();
                shell.open();

                <I><span class="code-comment">// Browser code
</span></I>
                initMozillaBrowser(uriCombo.getText(), canvas, xulrunnerPath);

                <I><span class="code-comment">// End of browser code
</span></I>
                <B><span class="code-lang">while</span></B> (!shell.isDisposed()) {
                        <B><span class="code-lang">if</span></B> (!display.readAndDispatch()) {
                                display.sleep();
                        }
                }

                display.dispose();
        }

        <I><span class="code-comment">/**
         * 
         * @param uri
         * @param canvas
         * @param xulrunnerPath if you have a XULRunner valid version in your system, but not
         *      installed, you can use that version to run the browser. This param must contain
         *      its path, or null in other case.
         */</span></I>
        <B><span class="code-lang">private</span></B> <B><span class="code-lang">void</span></B> initMozillaBrowser(String uri, Canvas canvas,
                        String xulrunnerPath) {

                browser = <B><span class="code-lang">new</span></B> Browser(canvas, SWT.MOZILLA);
            <I><span class="code-comment">//nsIWebBrowser webBrowser = (nsIWebBrowser)browser.getWebBrowser();
</span></I>                
               

                browser.setBounds(canvas.getClientArea());

                browser.setUrl(uri);
                browser.addProgressListener(<B><span class="code-lang">new</span></B> ProgressListener() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> changed(ProgressEvent event) {
                                uriCombo.setText(browser.getUrl());
                                updateToolItemsState();
                        }

                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> completed(ProgressEvent event) {
                                updateToolItemsState();
                        }
                });
        }

        

       

        <B><span class="code-lang">private</span></B> Image getImage(String path) {
                InputStream sourceStream = <B><span class="code-lang">this</span></B>.getClass().getResourceAsStream(path);
                ImageData source = <B><span class="code-lang">new</span></B> ImageData(sourceStream);
                Image image = <B><span class="code-lang">new</span></B> Image(<B><span class="code-lang">null</span></B>, source);

                <B><span class="code-lang">try</span></B> {
                        sourceStream.close();
                } <B><span class="code-lang">catch</span></B> (IOException e) {
                        e.printStackTrace();
                }

                <B><span class="code-lang">return</span></B> image;
        }

        <B><span class="code-lang">private</span></B> <B><span class="code-lang">void</span></B> updateToolItemsState() {
                <B><span class="code-lang">if</span></B> (!backItem.isEnabled() &amp;&amp; browser.isBackEnabled()) {
                        backItem.setEnabled(<B><span class="code-lang">true</span></B>);
                } <B><span class="code-lang">else</span></B> <B><span class="code-lang">if</span></B> (backItem.isEnabled() &amp;&amp; !browser.isBackEnabled()) {
                        backItem.setEnabled(<B><span class="code-lang">false</span></B>);
                }

                <B><span class="code-lang">if</span></B> (!forwardItem.isEnabled() &amp;&amp; browser.isForwardEnabled()) {
                        forwardItem.setEnabled(<B><span class="code-lang">true</span></B>);
                } <B><span class="code-lang">else</span></B> <B><span class="code-lang">if</span></B> (forwardItem.isEnabled() &amp;&amp; !browser.isForwardEnabled()) {
                        forwardItem.setEnabled(<B><span class="code-lang">false</span></B>);
                }
        }

        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String[] args) {

                <B><span class="code-lang">if</span></B> (args.length &gt; 0) {
                        <B><span class="code-lang">new</span></B> LadyrBrowser(args[0]);
                } <B><span class="code-lang">else</span></B> {
                        <B><span class="code-lang">new</span></B> LadyrBrowser(<B><span class="code-lang">null</span></B>);
                }
        }

}
</pre></div><h2 id="a5.JavaXPCOMaccessinbrowser">5. JavaXPCOM access in browser</h2>
<p>
In this section we will talk about some functionalities that can be accessed from WebBrowser, for instance, change browser properties or observe request and responses.
</p>
<p>
If you wish, you can download all the examples for chapters 4 to 7 <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-src.zip">here</a>. Also, you can download the <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-bin-win.zip">windows binaries</a> or the <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-bin-linux.zip">linux binaries</a>.
</p>
<p>
First we change the user preferences of our browser adding a few lines of code to our <tt>SimpleBrowser</tt>.
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.browser;

<B><span class="code-lang">import</span></B> org.eclipse.swt.SWT;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressEvent;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressListener;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Display;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Shell;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.Mozilla;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.*;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.Browser;
<B><span class="code-lang">import</span></B> org.eclipse.swt.SWTError;


<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> SimpleBrowserWithPrefs {

      <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String args[]) {
        
                <B><span class="code-lang">final</span></B> Browser browser;
              Display display = <B><span class="code-lang">new</span></B> Display();
              Shell shell = <B><span class="code-lang">new</span></B> Shell(display);

              shell.setSize(800, 600);
              shell.open();

              <I><span class="code-comment">// If you have XULRunner installed, you can call the constructor without
</span></I>              <I><span class="code-comment">// the last parameter:
</span></I>              <I><span class="code-comment">//
</span></I>              <I><span class="code-comment">// final MozillaBrowser browser = new MozillaBrowser(shell,SWT.BORDER);
</span></I>              <I><span class="code-comment">//
</span></I>              <I><span class="code-comment">// That last parameter is the path for XULRunner files
</span></I>              <I><span class="code-comment">// (where you have uncompressed downloaded XULRunner package).
</span></I>              
              <B><span class="code-lang">try</span></B> {
                        browser = <B><span class="code-lang">new</span></B> Browser(shell, SWT.MOZILLA);
                } <B><span class="code-lang">catch</span></B> (SWTError e) {
                        System.out.println(<B><span class="code-string">&quot;Could not instantiate Browser: &quot;</span></B> + e.getMessage());
                        <B><span class="code-lang">return</span></B>;
                }
                
              
              <I><span class="code-comment">// Adapt browser size to shell size
</span></I>              browser.setBounds(shell.getClientArea());

              <I><span class="code-comment">// Load an URL into the web browser
</span></I>              browser.setUrl(<B><span class="code-string">&quot;http://www.google.com&quot;</span></B>);
              
              Mozilla mozilla = Mozilla.getInstance();
              
              
              
              nsIServiceManager serviceManager = mozilla.getServiceManager();
             

              <I><span class="code-comment">// Obtain preferences service 
</span></I>              String contractID = <B><span class="code-string">&quot;@mozilla.org/preferences-service;1&quot;</span></B>;
              nsIPrefService prefService = (nsIPrefService) serviceManager
                              .getServiceByContractID(contractID,
                                              nsIPrefService.NS_IPREFSERVICE_IID);
              <I><span class="code-comment">// Get a branch to access to the entire preference tree
</span></I>              nsIPrefBranch branch = prefService.getBranch(<B><span class="code-string">&quot;&quot;</span></B>);
              
              <I><span class="code-comment">// Set some preferences
</span></I>              <I><span class="code-comment">// Warn before submitting a form to an insecure area ? -&gt; False
</span></I>              branch.setBoolPref(<B><span class="code-string">&quot;security.warn_submit_insecure&quot;</span></B>, 0);
              
              <I><span class="code-comment">// Select direction of text:
</span></I>              <I><span class="code-comment">//   1 : Left-to-right
</span></I>              <I><span class="code-comment">//   2 : Right-to-left
</span></I>              branch.setIntPref(<B><span class="code-string">&quot;bidi.direction&quot;</span></B>, 2);
              
              <I><span class="code-comment">// Allow current document to specify colors to use? 
</span></I>              <I><span class="code-comment">// (If false, background images will also not be loaded)
</span></I>              branch.setBoolPref(<B><span class="code-string">&quot;browser.display.use_document_colors&quot;</span></B>, 0);   
              
              
              
              <I><span class="code-comment">// Listens for page loading status.
</span></I>              browser.addProgressListener(<B><span class="code-lang">new</span></B> ProgressListener() {
                      <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> changed(ProgressEvent event) {
                      }

                      <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> completed(ProgressEvent event) {
                        nsIWebBrowser webBrowser = (nsIWebBrowser)browser.getWebBrowser();
                        nsIDOMWindow window = webBrowser.getContentDOMWindow();
                                nsIDOMDocument document = window.getDocument();
                                System.out.println(document);
                      }
              });
              
              
              

              <B><span class="code-lang">while</span></B> (!shell.isDisposed()) {
                      <B><span class="code-lang">if</span></B> (!display.readAndDispatch()) {
                              display.sleep();
                      }
              }
      }
}
</pre></div><p>
Another kind of services can be used. By now, we heave changed Mozilla properties to alter the browser behaviour, but more useful tasks can be done taking advantage of services. In the following example we are going to observe browser requests and responses, so we could access them. In XPCOM exists an interface called <tt>nsIObserver</tt>, which basically allows observe an event corresponding to a topic, once it has been added to the observer service. To add an observer to the observer service exists a method <tt>void nsIObserverService.addObserver(nsIObserver anObserver, String aTopic, boolean ownsWeak)</tt>, that registers a given listener for a notifications regarding the specified topic, where, as you can read in javadoc, <tt>anObserve</tt> is the interface pointer which will receive notifications, <tt>aTopic</tt> is the notification topic or subject and <tt>ownsWeak</tt> that can be set to false when the nsIObserverService will hold a strong reference to <tt>anObserver</tt> or set to true and <tt>anObserver</tt> supports the <tt>nsIWeakReference</tt> interface (a weak reference will be held). Therefore, to create an observer to add to the service, we must implement <tt>nsIObserver</tt> interface, which contains a method <tt>public void observe(nsISupports aSubject, String aTopic, String aData)</tt> which will be called when there is a notification for the topic specified.
</p>
<p>
In the following example you can distinguish four different steps:
</p>
<ol><li>Get the Service Manager
</li><li>Get the Observer Service
</li><li>Create a simple HTTP observer (we have implemented a inner class to extends nsIObserver and provide some basic functionalities)
</li><li>Add our observer to the service for listen to request and responses
</li></ol><p>
Because is a very simple example, only prints on screen some information about requests and responses, but if you need information such that from the observer, we recommend you a listener architecture, that allows the user to add a listener which informs about queries and responses or whatever you need from your observer.
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.browser;


<B><span class="code-lang">import</span></B> org.eclipse.swt.SWT;
<B><span class="code-lang">import</span></B> org.eclipse.swt.SWTError;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.Browser;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressEvent;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressListener;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Display;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Shell;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.Mozilla;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.*;


<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> SimpleBrowserWithObserver {

        <B><span class="code-lang">public</span></B> SimpleBrowserWithObserver(String xulrunnerPath) {
      
                        <B><span class="code-lang">final</span></B> Browser browser;
                        Display display = <B><span class="code-lang">new</span></B> Display();
                Shell shell = <B><span class="code-lang">new</span></B> Shell(display);

                shell.setSize(800, 600);
                shell.open();

                <I><span class="code-comment">// If you have XULRunner installed, you can call the constructor without
</span></I>                <I><span class="code-comment">// the last parameter:
</span></I>                <I><span class="code-comment">//
</span></I>                <I><span class="code-comment">// final MozillaBrowser browser = new MozillaBrowser(shell,SWT.BORDER);
</span></I>                <I><span class="code-comment">//
</span></I>                <I><span class="code-comment">// That last parameter is the path for XULRunner files
</span></I>                <I><span class="code-comment">// (where you have uncompressed downloaded XULRunner package).
</span></I>                
                <B><span class="code-lang">try</span></B> {
                                browser = <B><span class="code-lang">new</span></B> Browser(shell, SWT.MOZILLA);
                        } <B><span class="code-lang">catch</span></B> (SWTError e) {
                                System.out.println(<B><span class="code-string">&quot;Could not instantiate Browser: &quot;</span></B> + e.getMessage());
                                <B><span class="code-lang">return</span></B>;
                        }
                
                <I><span class="code-comment">// Get ServiceManager
</span></I>                nsIServiceManager serviceManager = Mozilla.getInstance().getServiceManager();
                <I><span class="code-comment">// Get Observer Service
</span></I>                nsIObserverService observerService = (nsIObserverService) serviceManager
                                        .getServiceByContractID(<B><span class="code-string">&quot;@mozilla.org/observer-service;1&quot;</span></B>,
                                                        nsIObserverService.NS_IOBSERVERSERVICE_IID);
                
                <I><span class="code-comment">// Create a simple HTTP observer
</span></I>                SimpleHTTPObserver httpObserver = <B><span class="code-lang">new</span></B> SimpleHTTPObserver();
                
                <I><span class="code-comment">// Add our observer to the service for listen to request and responses
</span></I>                observerService.addObserver(httpObserver, <B><span class="code-string">&quot;http-on-modify-request&quot;</span></B>, <B><span class="code-lang">false</span></B>);
                observerService.addObserver(httpObserver, <B><span class="code-string">&quot;http-on-examine-response&quot;</span></B>, <B><span class="code-lang">false</span></B>);
                
                <I><span class="code-comment">// Adapt browser size to shell size
</span></I>                browser.setBounds(shell.getClientArea());

                <I><span class="code-comment">// Load an URL into the web browser
</span></I>                browser.setUrl(<B><span class="code-string">&quot;http://www.google.com&quot;</span></B>);
                
                <I><span class="code-comment">// Listens for page loading status.
</span></I>                browser.addProgressListener(<B><span class="code-lang">new</span></B> ProgressListener() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> changed(ProgressEvent event) {
                        }

                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> completed(ProgressEvent event) {
                                nsIWebBrowser webBrowser = (nsIWebBrowser)browser.getWebBrowser();
                                <B><span class="code-lang">if</span></B> (webBrowser == <B><span class="code-lang">null</span></B>) {
                                        System.out.println(<B><span class="code-string">&quot;Could not get the nsIWebBrowser from the Browser widget&quot;</span></B>);
                                }
                                nsIDOMWindow window = webBrowser.getContentDOMWindow();
                                nsIDOMDocument doc = window.getDocument();
                            System.out.println(doc);
                        }
                });

                <B><span class="code-lang">while</span></B> (!shell.isDisposed()) {
                        <B><span class="code-lang">if</span></B> (!display.readAndDispatch()) {
                                display.sleep();
                        }
                }
                
                observerService.removeObserver(httpObserver, <B><span class="code-string">&quot;http-on-modify-request&quot;</span></B>);
                
        }
        
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String args[]) {
                String xulrunnerPath = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">if</span></B> ( args.length &gt; 0 ) {
                        xulrunnerPath = args[0];
                }
                
                <B><span class="code-lang">new</span></B> SimpleBrowserWithObserver(xulrunnerPath);
        }

        
        <I><span class="code-comment">/**
         * Simple HTTP observer listen to requests and responses. 
         * 
         * @author alpgarcia
         *
         */</span></I>
        <B><span class="code-lang">class</span></B> SimpleHTTPObserver <B><span class="code-lang">implements</span></B> nsIObserver {
                
                <B><span class="code-lang">private</span></B> <B><span class="code-lang">int</span></B> nRequests = 0;
                <B><span class="code-lang">private</span></B> <B><span class="code-lang">int</span></B> nResponses = 0;
                
                <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> observe(nsISupports aSubject, String aTopic, String aData) {
                        
                        <I><span class="code-comment">// You can read corresponding javadoc for this method, here we have pasted
</span></I>                        <I><span class="code-comment">// some interesting lines from there:
</span></I>                        <I><span class="code-comment">//
</span></I>                        <I><span class="code-comment">//    Observe will be called when there is a notification for the topic. 
</span></I>                        <I><span class="code-comment">//    This assumes that the object implementing this interface has been registered
</span></I>                        <I><span class="code-comment">//    with an observer service such as the nsIObserverService.
</span></I>                        <I><span class="code-comment">//    If you expect multiple topics/subjects, the impl is responsible for filtering.
</span></I>                        <I><span class="code-comment">// 
</span></I>                        <I><span class="code-comment">//    You should not modify, add, remove, or enumerate notifications in the
</span></I>                        <I><span class="code-comment">//    implemention of observe.
</span></I>                        
                        
                        <I><span class="code-comment">// Get the channel for listen to from notification specific interface pointer.
</span></I>                        nsIHttpChannel httpChannel = 
                                (nsIHttpChannel) aSubject.queryInterface(nsIHttpChannel.NS_IHTTPCHANNEL_IID);
                        
                        <I><span class="code-comment">// Our observer can listen to request or responses, it depends on the
</span></I>                        <I><span class="code-comment">// notification topic or subject.
</span></I>                        <B><span class="code-lang">if</span></B> (aTopic.equals(<B><span class="code-string">&quot;http-on-modify-request&quot;</span></B>)) {
                
                                nRequests++;
                                
                                System.out.println(<B><span class="code-string">&quot;\n---- BEGIN REQUEST NUMBER &quot;</span></B> + nRequests + <B><span class="code-string">&quot; ----\n&quot;</span></B>);
                                
                                httpChannel.visitRequestHeaders(<B><span class="code-lang">new</span></B> nsIHttpHeaderVisitor() {
                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> visitHeader(String header, String value) {
                                                System.out.println(<B><span class="code-string">&quot;Header: &quot;</span></B> + header + <B><span class="code-string">&quot; -- Value: &quot;</span></B>
                                                                + value);
                                        }

                                        <B><span class="code-lang">public</span></B> nsISupports queryInterface(String arg0) {
                                                <B><span class="code-lang">return</span></B> <B><span class="code-lang">null</span></B>;
                                        }
                                });
                                
                                System.out.println(<B><span class="code-string">&quot;  Method: &quot;</span></B> + httpChannel.getRequestMethod());
                                System.out.println(<B><span class="code-string">&quot;  Name: &quot;</span></B> + httpChannel.getName());
                                System.out.println(<B><span class="code-string">&quot;  Host: &quot;</span></B> + getRequestHeader(httpChannel, <B><span class="code-string">&quot;host&quot;</span></B>));
                                System.out.println(<B><span class="code-string">&quot;  User Agent: &quot;</span></B> + getRequestHeader(httpChannel, <B><span class="code-string">&quot;user-agent&quot;</span></B>));
                                System.out.println(<B><span class="code-string">&quot;  Accept: &quot;</span></B> + httpChannel.getRequestHeader(<B><span class="code-string">&quot;accept&quot;</span></B>));
                                System.out.println(<B><span class="code-string">&quot;  Accept Language: &quot;</span></B> + getRequestHeader(httpChannel, <B><span class="code-string">&quot;accept-language&quot;</span></B>));
                                System.out.println(<B><span class="code-string">&quot;  Accept Encoding: &quot;</span></B> + getRequestHeader(httpChannel, <B><span class="code-string">&quot;accept-encoding&quot;</span></B>));
                                System.out.println(<B><span class="code-string">&quot;  Accept Charset: &quot;</span></B> + getRequestHeader(httpChannel, <B><span class="code-string">&quot;accept-charset&quot;</span></B>));
                                System.out.println(<B><span class="code-string">&quot;  Keep Alive: &quot;</span></B> + getRequestHeader(httpChannel, <B><span class="code-string">&quot;keep-alive&quot;</span></B>));
                                System.out.println(<B><span class="code-string">&quot;  Connection: &quot;</span></B> + getRequestHeader(httpChannel, <B><span class="code-string">&quot;connection&quot;</span></B>));
                                System.out.println(<B><span class="code-string">&quot;  Cookie: &quot;</span></B> + getRequestHeader(httpChannel, <B><span class="code-string">&quot;cookie&quot;</span></B>));
                                
                                System.out.println(<B><span class="code-string">&quot;\n---- END REQUEST NUMBER &quot;</span></B> + nRequests + <B><span class="code-string">&quot; ----\n&quot;</span></B>);
                                
                        } <B><span class="code-lang">else</span></B> <B><span class="code-lang">if</span></B> (aTopic.equals(<B><span class="code-string">&quot;http-on-examine-response&quot;</span></B>)) {
                                
                                nResponses++;

                                System.out.println(<B><span class="code-string">&quot;\n---- BEGIN RESPONSE NUMBER &quot;</span></B> + nResponses + <B><span class="code-string">&quot; ----\n&quot;</span></B>);
                                
                                httpChannel.visitResponseHeaders(<B><span class="code-lang">new</span></B> nsIHttpHeaderVisitor() {

                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> visitHeader(String header, String value) {
                                                System.out.println(<B><span class="code-string">&quot;Header: &quot;</span></B> + header + <B><span class="code-string">&quot; -- Value: &quot;</span></B>
                                                                + value);
                                        }

                                        <B><span class="code-lang">public</span></B> nsISupports queryInterface(String arg0) {
                                                <B><span class="code-lang">return</span></B> <B><span class="code-lang">null</span></B>;
                                        }

                                });

                                System.out.println(<B><span class="code-string">&quot;  Status: &quot;</span></B> + httpChannel.getResponseStatus());
                                System.out.println(<B><span class="code-string">&quot;  Status Text: &quot;</span></B> + httpChannel.getResponseStatusText());
                                System.out.println(<B><span class="code-string">&quot;  Content Type: &quot;</span></B> + httpChannel.getContentType());
                                System.out.println(<B><span class="code-string">&quot;  Content Length: &quot;</span></B> + httpChannel.getContentLength());
                                System.out.println(<B><span class="code-string">&quot;  Content Encoding: &quot;</span></B> + getResponseHeader(httpChannel, <B><span class="code-string">&quot;content-encoding&quot;</span></B>));
                                System.out.println(<B><span class="code-string">&quot;  Server: &quot;</span></B> + getResponseHeader(httpChannel, <B><span class="code-string">&quot;server&quot;</span></B>));
                                
                                System.out.println(<B><span class="code-string">&quot;\n---- END RESPONSE NUMBER &quot;</span></B> + nResponses + <B><span class="code-string">&quot; ----\n&quot;</span></B>);
                                
                        }
                        
                }

                <B><span class="code-lang">public</span></B> nsISupports queryInterface(String uuid) {
                        <B><span class="code-lang">return</span></B> Mozilla.queryInterface(<B><span class="code-lang">this</span></B>, uuid);
                }
                
                <B><span class="code-lang">private</span></B> String getRequestHeader(nsIHttpChannel httpChannel, String header) {
                        <B><span class="code-lang">try</span></B> {
                                <B><span class="code-lang">return</span></B> httpChannel.getRequestHeader(header);
                        } <B><span class="code-lang">catch</span></B> (Exception e) {
                                <B><span class="code-lang">return</span></B> <B><span class="code-string">&quot;Header Not Found&quot;</span></B>;
                        }
                }
                
                <B><span class="code-lang">private</span></B> String getResponseHeader(nsIHttpChannel httpChannel, String header) {
                        <B><span class="code-lang">try</span></B> {
                                <B><span class="code-lang">return</span></B> httpChannel.getResponseHeader(header);
                        } <B><span class="code-lang">catch</span></B> (Exception e) {
                                <B><span class="code-lang">return</span></B> <B><span class="code-string">&quot;Header Not Found&quot;</span></B>;
                        }
                }
                
        }

}
</pre></div><h2 id="a6.W3CDOMAccesstoloadedPage">6. W3C DOM Access to loaded Page</h2>
<p>
If you wish, you can download all the examples for chapters 4 to 7 <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-src.zip">here</a>. Also, you can download the <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-bin-win.zip">windows binaries</a> or the <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-bin-linux.zip">linux binaries</a>.
</p>
<h3 id="a6.1mozdom4javalibrary">6.1 mozdom4java library</h3>
<p>
Better than access to Mozilla DOM tree would be can navigate through a W3C DOM tree, because it is a standard that allows dynamical access to DOM tree of HTML and XML documents. To do that, we will use a bridge between Mozilla DOM implementation and W3C DOM interfaces, of course, for Java. Currently exists a project working on that called   <a class="ext-link" href="http://mozdom4java.mozdev.org/index.html"><span class="icon">mozdom4java</span></a>. You can download the latest version (most recently version when this guide was written) of that library from that URL, or clicking <a class="ext-link" href="http://downloads.mozdev.org/mozdom4java/mozdom4java-1.2.zip"><span class="icon">here</span></a>. Also you can obtain it <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/mozdom4java-1.2.zip">from our site</a> 
</p>
<p>
Once we have download the package, we can use its features adding the jar file to our <tt>classpath</tt>. For instance, we will add a button to our <tt>LadyrBrowser</tt> to extract all anchors in the loaded HTML document. We use Standard Output to print some information about them, in order to ensure that the node conversion works correctly.
</p>
<div class="code"><pre>...
<B><span class="code-lang">import</span></B> org.mozilla.dom.html.HTMLAnchorElementImpl;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMDocument;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMHTMLAnchorElement;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMNode;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMNodeList;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLAnchorElement;

...


<I><span class="code-comment">// After goItem, we can include a new button
</span></I>
<B><span class="code-lang">final</span></B> ToolItem anchorItem = <B><span class="code-lang">new</span></B> ToolItem(toolbar, SWT.PUSH);
anchorItem.setImage(getImage(<B><span class="code-string">&quot;resources/anchors.png&quot;</span></B>));

<I><span class="code-comment">// When that button is pressed, then we obtain the HTML document corresponding to
</span></I><I><span class="code-comment">// the URL loaded in browser. Next, we extract all its child nodes with 'a' tag name
</span></I><I><span class="code-comment">// and print its content.
</span></I><B><span class="code-lang">final</span></B> ToolItem anchorItem = <B><span class="code-lang">new</span></B> ToolItem(toolbar, SWT.PUSH);
anchorItem.setImage(getImage(<B><span class="code-string">&quot;resources/anchors.png&quot;</span></B>));
anchorItem.addSelectionListener(<B><span class="code-lang">new</span></B> SelectionAdapter() {
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetSelected(SelectionEvent event) {
                
                <I><span class="code-comment">// First, we obtain a Mozilla DOM Document representation
</span></I>                nsIDOMDocument doc = browser.getDocument();
                                
                <I><span class="code-comment">// Get all anchors from the loaded HTML document
</span></I>                nsIDOMNodeList nodeList = doc.getElementsByTagName(<B><span class="code-string">&quot;a&quot;</span></B>);

                <B><span class="code-lang">for</span></B> ( <B><span class="code-lang">int</span></B> i = 0; i &lt; nodeList.getLength(); i++ ){
                                        
                        <I><span class="code-comment">// Get Mozilla DOM node
</span></I>                        nsIDOMNode mozNode = nodeList.item(i);
                                        
                        <I><span class="code-comment">// Get the appropiate interface
</span></I>                        nsIDOMHTMLAnchorElement mozAnchor = 
                                (nsIDOMHTMLAnchorElement) mozNode.queryInterface(
                                                nsIDOMHTMLAnchorElement.NS_IDOMHTMLANCHORELEMENT_IID);
                                        
                        <I><span class="code-comment">// Get the corresponding W3C DOM node
</span></I>                        HTMLAnchorElement a = (HTMLAnchorElement)
                                HTMLAnchorElementImpl.getDOMInstance(mozAnchor);
                                                                        
                        <I><span class="code-comment">// Test the HTML element
</span></I>                        System.out.println(<B><span class="code-string">&quot;Tag Name: &quot;</span></B> + a.getNodeName() + <B><span class="code-string">&quot; -- Text: &quot;</span></B> + a.getTextContent() 
                                        + <B><span class="code-string">&quot; -- Href: &quot;</span></B> + a.getHref());
                                        
                }
                
        }
});

...</pre></div><p>
Also, we can use <tt>NodeFactory</tt> to convert Mozilla nodes into W3C nodes, but we would be losing specificity, because though we don't need to know the type of the node, we can only obtain generic Elements and we couldn't obtain the W3C concrete element implementation, as shows the next example:
</p>
<div class="code"><pre>...

<B><span class="code-lang">import</span></B> org.mozilla.interfaces.*;

<B><span class="code-lang">import</span></B> org.mozilla.dom.html.HTMLAnchorElementImpl;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLAnchorElement;


                <B><span class="code-lang">final</span></B> ToolItem anchorItem = <B><span class="code-lang">new</span></B> ToolItem(toolbar, SWT.PUSH);
                anchorItem.setImage(getImage(<B><span class="code-string">&quot;resources/anchors.png&quot;</span></B>));
                anchorItem.addSelectionListener(<B><span class="code-lang">new</span></B> SelectionAdapter() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetSelected(SelectionEvent event) {
                                
                                <I><span class="code-comment">// First, we obtain a Mozilla DOM Document representation
</span></I>                                        nsIWebBrowser webBrowser = (nsIWebBrowser)browser.getWebBrowser();
                                        <B><span class="code-lang">if</span></B> (webBrowser == <B><span class="code-lang">null</span></B>) {
                                                System.out.println(<B><span class="code-string">&quot;Could not get the nsIWebBrowser from the Browser widget&quot;</span></B>);
                                        }       
                                
                                        nsIDOMWindow window = webBrowser.getContentDOMWindow();
                                        nsIDOMDocument doc = window.getDocument();
                                        System.out.println(doc);
                                                
                                <I><span class="code-comment">// Get all anchors from the loaded HTML document
</span></I>                                nsIDOMNodeList nodeList = doc.getElementsByTagName(<B><span class="code-string">&quot;a&quot;</span></B>);

                                <B><span class="code-lang">for</span></B> ( <B><span class="code-lang">int</span></B> i = 0; i &lt; nodeList.getLength(); i++ ){
                                                        
                                        <I><span class="code-comment">// Get Mozilla DOM node
</span></I>                                        nsIDOMNode mozNode = nodeList.item(i);
                                                        
                                        <I><span class="code-comment">// Get the appropiate interface
</span></I>                                        nsIDOMHTMLAnchorElement mozAnchor = 
                                                (nsIDOMHTMLAnchorElement) mozNode.queryInterface(
                                                                nsIDOMHTMLAnchorElement.NS_IDOMHTMLANCHORELEMENT_IID);
                                                        
                                        <I><span class="code-comment">// Get the corresponding W3C DOM node
</span></I>                                        HTMLAnchorElement a = (HTMLAnchorElement)
                                                HTMLAnchorElementImpl.getDOMInstance(mozAnchor);
                                                                                        
                                        <I><span class="code-comment">// Test the HTML element
</span></I>                                        System.out.println(<B><span class="code-string">&quot;Tag Name: &quot;</span></B> + a.getNodeName() + <B><span class="code-string">&quot; -- Text: &quot;</span></B> + a.getTextContent() 
                                                        + <B><span class="code-string">&quot; -- Href: &quot;</span></B> + a.getHref());
                                                        
                                }
                                
                        }
                });

</pre></div><p>
So the use of <tt>NodeFactory</tt> doesn't helps so much if we need concrete W3C element implementations. We can use the code of the previous example and convert the Mozilla anchor element directly into a W3C anchor Element, but then we need to write code to transform every different node type. We think the better aproximation would be that <tt>NodeFactory</tt> returns the concrete W3C element implementation as a W3C generic element, because the user would need only a cast to obtain corresponding concrete W3C element implementation. Also the transformation could cover the query for the specific interface, thus offering the users the possibility to obtain a W3C DOM element directly from the Mozilla DOM node, without any kind of operation over it. In the next section we talk about how to patch <i>mozdom4java</i> library to obtain that feature and modify the previous example to see the difference.
</p>
<h3 id="a6.2Patchingmozdom4javatoconvertMozillaDOMTreeintoW3CDOMTree">6.2 Patching mozdom4java to convert Mozilla DOM Tree into W3C DOM Tree</h3>
<p>
If we want work always with the W3C DOM tree, it can be a little difficult to transform node by node, having to know the HTML element which we have to convert. We propose a few modifications in <strong>mozdom4java</strong> to obtain concrete W3C DOM nodes directly. That changes, in our opinion, simplifies the code and makes it more clear, because we can forget the work with Mozilla DOM elements once we have the nodes we re interested in. Finally, when we talk about XPath evaluators that could return a list of nodes, will be very useful instead of work with Mozilla DOM nodes, work directly with W3C elements, allow us to build a browser which works with standard nodes and forgetting Mozilla nodes outside the browser code, in other words, our aim consist on develope a web browser that can be used without any knowledge about Mozilla implementation, in a standard way.
</p>
<p>
First we need to download the Java Language Binding for DOM Level 2 specification. The better option is download the jar files used by <i>mozdom4java</i> people, available in their <a class="ext-link" href="http://www.mozdev.org/source/browse/mozdom4java/src/jars/"><span class="icon">CVS repository</span></a>, because they contains all necessary files, including 'hand made' extensions, so we won't need touch anything. Also we need Mozilla interfaces, because contains the classes for the Mozilla DOM nodes. The files needed are:
</p>
<ul><li><strong>w3chtml.jar</strong> <a class="ext-link" href="http://www.mozdev.org/source/browse/~checkout~/mozdom4java/src/jars/w3chtml.jar?rev=1.1&amp;content-type=text/plain"><span class="icon">latest version when this guide was written</span></a>. Contains W3C DOM HTML level 2 interfaces into two different packages, <tt>org.w3c.dom.html</tt> and <tt>org.w3c.dom.html2</tt>. You can find a copy at the end of the page or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/w3chtml.jar">clicking here</a>.
</li><li><strong>w3cextension.jar</strong> <a class="ext-link" href="http://www.mozdev.org/source/browse/~checkout~/mozdom4java/src/jars/w3cextension.jar?rev=1.1&amp;content-type=text/plain"><span class="icon">latest version when this guide was written</span></a>. Contains <tt>KeyEvent</tt> class into the <tt>org.w3c.dom.events</tt> package. You can find a copy at the end of the page or <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/w3cextension.jar">clicking here</a>
</li><li><strong>MozillaInterfaces.jar</strong>: For more information about where you can find that jar, please, read section 2 from this guide.
</li><li><strong>MozillaGlue.jar</strong>: For more information about where you can find that jar, please, read section 2 from this guide.
</li></ul><p>
Once you have added these jars to your <tt>classpath</tt>, the <i>mozdom4java</i> library must compile fine (without errors, although some warnings could be launched). The next step consists on modify some <i>mozdom4java</i> source files. We will see and explain the changes file by file. Moreover, you can download a patch with all the necessary changes and directly apply it to <i>mozdom4java</i> source, we will see it in the next section. Maybe you prefer download the patched library in jar format: <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/patchedmozdom4java-1.2.jar">Patched mozdom4java jar</a> and <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/patchedmozdom4java-1.2-src.jar">Source code for patched mozdom4java in a jar file</a>
</p>
<p>
To patch the library manually, please follow the following steps:
</p>
<ul><li>We will create a HTML element factory with the functionality to convert any Mozilla DOM element node into its corresponding W3C DOM element node. The following class does it and contains a lot of comments about its operations. Basically, uses Java reflection capabilities to do the same transformation steps that the example of <i>mozdom4java</i> library use showed in the previous section, but in a generic manner, in such a way that you don't need to know anything about the Mozilla DOM node, only the node itself.
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.dom;

<B><span class="code-lang">import</span></B> java.lang.reflect.Field;
<B><span class="code-lang">import</span></B> java.lang.reflect.Method;
<B><span class="code-lang">import</span></B> java.util.HashMap;
<B><span class="code-lang">import</span></B> java.util.Map;

<B><span class="code-lang">import</span></B> org.mozilla.interfaces.*;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLElement;

<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> HTMLElementFactory {

        <B><span class="code-lang">private</span></B> <B><span class="code-lang">static</span></B> HTMLElementFactory instance;
        
        <B><span class="code-lang">private</span></B> Map&lt;String, String&gt; corresp;
                
        <B><span class="code-lang">private</span></B> HTMLElementFactory() {
                initCorrespondence();
        }
        
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> HTMLElementFactory getInstance(){
                <B><span class="code-lang">if</span></B>(instance == <B><span class="code-lang">null</span></B>){
                        instance = <B><span class="code-lang">new</span></B> HTMLElementFactory();
                }
                <B><span class="code-lang">return</span></B> instance;
        }
        
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> HTMLElement getHTMLElement(nsIDOMNode nsNode) {
                <B><span class="code-lang">return</span></B> getInstance().getConcreteNode(nsNode);
        }
        
        <B><span class="code-lang">private</span></B> <B><span class="code-lang">void</span></B> initCorrespondence() {

                corresp = <B><span class="code-lang">new</span></B> HashMap&lt;String, String&gt;();
                corresp.put(<B><span class="code-string">&quot;a&quot;</span></B>, <B><span class="code-string">&quot;Anchor&quot;</span></B>);

                corresp.put(<B><span class="code-string">&quot;applet&quot;</span></B>, <B><span class="code-string">&quot;Applet&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;area&quot;</span></B>, <B><span class="code-string">&quot;Area&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;base&quot;</span></B>, <B><span class="code-string">&quot;Base&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;basefont&quot;</span></B>, <B><span class="code-string">&quot;BaseFont&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;body&quot;</span></B>, <B><span class="code-string">&quot;Body&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;br&quot;</span></B>, <B><span class="code-string">&quot;BR&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;button&quot;</span></B>, <B><span class="code-string">&quot;Button&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;dir&quot;</span></B>, <B><span class="code-string">&quot;Directory&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;div&quot;</span></B>, <B><span class="code-string">&quot;Div&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;dl&quot;</span></B>, <B><span class="code-string">&quot;DList&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;fieldset&quot;</span></B>, <B><span class="code-string">&quot;FieldSet&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;font&quot;</span></B>, <B><span class="code-string">&quot;Font&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;form&quot;</span></B>, <B><span class="code-string">&quot;Form&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;frame&quot;</span></B>, <B><span class="code-string">&quot;Frame&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;frameset&quot;</span></B>, <B><span class="code-string">&quot;FrameSet&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;head&quot;</span></B>, <B><span class="code-string">&quot;Head&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;h1&quot;</span></B>, <B><span class="code-string">&quot;Heading&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;h2&quot;</span></B>, <B><span class="code-string">&quot;Heading&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;h3&quot;</span></B>, <B><span class="code-string">&quot;Heading&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;h4&quot;</span></B>, <B><span class="code-string">&quot;Heading&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;h5&quot;</span></B>, <B><span class="code-string">&quot;Heading&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;h6&quot;</span></B>, <B><span class="code-string">&quot;Heading&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;hr&quot;</span></B>, <B><span class="code-string">&quot;HR&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;html&quot;</span></B>, <B><span class="code-string">&quot;Html&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;iframe&quot;</span></B>, <B><span class="code-string">&quot;IFrame&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;img&quot;</span></B>, <B><span class="code-string">&quot;Image&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;input&quot;</span></B>, <B><span class="code-string">&quot;Input&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;isindex&quot;</span></B>, <B><span class="code-string">&quot;IsIndex&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;label&quot;</span></B>, <B><span class="code-string">&quot;Label&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;legend&quot;</span></B>, <B><span class="code-string">&quot;Legend&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;li&quot;</span></B>, <B><span class="code-string">&quot;LI&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;link&quot;</span></B>, <B><span class="code-string">&quot;Link&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;map&quot;</span></B>, <B><span class="code-string">&quot;Map&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;menu&quot;</span></B>, <B><span class="code-string">&quot;Menu&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;meta&quot;</span></B>, <B><span class="code-string">&quot;Meta&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;ins&quot;</span></B>, <B><span class="code-string">&quot;Mod&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;del&quot;</span></B>, <B><span class="code-string">&quot;Mod&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;object&quot;</span></B>, <B><span class="code-string">&quot;Object&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;ol&quot;</span></B>, <B><span class="code-string">&quot;OList&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;optgroup&quot;</span></B>, <B><span class="code-string">&quot;OptGroup&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;option&quot;</span></B>, <B><span class="code-string">&quot;Option&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;p&quot;</span></B>, <B><span class="code-string">&quot;Paragraph&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;param&quot;</span></B>, <B><span class="code-string">&quot;Param&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;pre&quot;</span></B>, <B><span class="code-string">&quot;Pre&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;q&quot;</span></B>, <B><span class="code-string">&quot;Quote&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;script&quot;</span></B>, <B><span class="code-string">&quot;Script&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;select&quot;</span></B>, <B><span class="code-string">&quot;Select&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;style&quot;</span></B>, <B><span class="code-string">&quot;Style&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;caption&quot;</span></B>, <B><span class="code-string">&quot;TableCaption&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;td&quot;</span></B>, <B><span class="code-string">&quot;TableCell&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;col&quot;</span></B>, <B><span class="code-string">&quot;TableCol&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;table&quot;</span></B>, <B><span class="code-string">&quot;Table&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;tr&quot;</span></B>, <B><span class="code-string">&quot;TableRow&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;thead&quot;</span></B>, <B><span class="code-string">&quot;TableSection&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;tfoot&quot;</span></B>, <B><span class="code-string">&quot;TableSection&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;tbody&quot;</span></B>, <B><span class="code-string">&quot;TableSection&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;textarea&quot;</span></B>, <B><span class="code-string">&quot;TextArea&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;title&quot;</span></B>, <B><span class="code-string">&quot;Title&quot;</span></B>);
                corresp.put(<B><span class="code-string">&quot;ul&quot;</span></B>, <B><span class="code-string">&quot;UList&quot;</span></B>);

        }

        <I><span class="code-comment">/**
         * Try to convert a Mozilla DOM node into W3C DOM element.
         * 
         * @param nsNode        node to convert into W3C DOM element.
         * @return      W3C HTML element corresponding to a Mozilla DOM node.
         */</span></I>
        <B><span class="code-lang">public</span></B> HTMLElement getConcreteNode(nsIDOMNode nsNode) {

                <I><span class="code-comment">// Only converts element nodes. If the mozilla node
</span></I>                <I><span class="code-comment">// isn't a Mozilla DOM element, we cannot convert into
</span></I>                <I><span class="code-comment">// an W3C DOM element
</span></I>                <B><span class="code-lang">if</span></B> (nsNode.getNodeType() == nsIDOMNode.ELEMENT_NODE) {

                        <I><span class="code-comment">// We use a hashmap to obtain element names from node names
</span></I>                        String htmlElementType = corresp.get(nsNode.getNodeName()
                                        .toLowerCase());
                        
                        <I><span class="code-comment">// If we don't know the element type, we cannot transform
</span></I>                        <I><span class="code-comment">// that node into W3C DOM element
</span></I>                        <B><span class="code-lang">if</span></B>(htmlElementType == <B><span class="code-lang">null</span></B>){
                                <B><span class="code-lang">return</span></B> <B><span class="code-lang">null</span></B>;
                        }
                        
                        <I><span class="code-comment">// Compose the class name for the Mozilla DOM element.
</span></I>                        String nsClassName = <B><span class="code-string">&quot;org.mozilla.interfaces.nsIDOMHTML&quot;</span></B>
                                        + htmlElementType + <B><span class="code-string">&quot;Element&quot;</span></B>;
                        
                        <I><span class="code-comment">// Compose the field name for the element IID
</span></I>                        String nsFieldInterfaceName = <B><span class="code-string">&quot;NS_IDOMHTML&quot;</span></B>
                                        + htmlElementType.toUpperCase() + <B><span class="code-string">&quot;ELEMENT_IID&quot;</span></B>;

                        <B><span class="code-lang">try</span></B> {
                                <I><span class="code-comment">// Once we have their names, obtain the class and the field
</span></I>                                Class nsClass = Class.forName(nsClassName);
                                Field field = nsClass.getField(nsFieldInterfaceName);

                                <I><span class="code-comment">// Get the field value (is a static field, so the argumentis ignored)
</span></I>                                String iid = (String) field.get(<B><span class="code-lang">null</span></B>);
                                
                                <I><span class="code-comment">// Get the apropiate node interface
</span></I>                                Object nsElement = nsNode.queryInterface(iid);
                                                                
                                <I><span class="code-comment">// Build the W3C DOM Element implementation class name
</span></I>                                <I><span class="code-comment">// (the package org.mozilla.dom.html contains concrete implementations
</span></I>                                <I><span class="code-comment">// for the W3C HTML element interfaces)
</span></I>                                String w3cClassName = <B><span class="code-string">&quot;org.mozilla.dom.html.HTML&quot;</span></B>
                                                + htmlElementType + <B><span class="code-string">&quot;ElementImpl&quot;</span></B>;
                                
                                <I><span class="code-comment">// Obtain the class for the corresponding W3C DOM Element implementation
</span></I>                                Class w3cClass = Class.forName(w3cClassName);
                                
                                <I><span class="code-comment">// Extract the method that must be invoked to transform the element
</span></I>                                Method creationMethod = w3cClass.getMethod(<B><span class="code-string">&quot;getDOMInstance&quot;</span></B>, nsClass);
                                
                                <I><span class="code-comment">// Invokes getDOMInstance method of corresponding W3C HTML element
</span></I>                                <I><span class="code-comment">//  which returns an instance of corresponding W3C HTML element
</span></I>                                HTMLElement node = (HTMLElement) creationMethod.invoke(<B><span class="code-lang">null</span></B>, nsElement);
                                <B><span class="code-lang">return</span></B> node;

                        } <B><span class="code-lang">catch</span></B> (Exception e) {
                                <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> Error(e);
                        }
                }

                <B><span class="code-lang">return</span></B> <B><span class="code-lang">null</span></B>;
        }

}

</pre></div></li></ul><ul><li>Taking advantage of our <tt>HTMLElementFactory</tt> class we will modify the <tt>NodeFactory</tt> class, in such a way that when you call the method <tt>org.w3c.dom.Node getNodeInstance( nsIDOMNode node )</tt> with a node which node type is <tt>nsIDOMNode.ELEMENT_NODE</tt> then returns directly the W3C DOM element implementation corresponding to the Mozilla DOM element passed as argument to the method, so we can cast the node returned by the method into the corresponding W3C DOM element. With this feature, we only need to know the type of Mozilla DOM node to do the cast, and avoid to call javaXPCOM methods directly every time you need to convert a node. We add the following code to de method:
<div class="code"><pre>...

      <I><span class="code-comment">// Import our factory to create W3C HTML elements from Mozilla DOM elements
</span></I>      <B><span class="code-lang">import</span></B> es.ladyr.dom.HTMLElementFactory;

...

        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> Node getNodeInstance( nsIDOMNode node )
        {
        <B><span class="code-lang">if</span></B> (node == <B><span class="code-lang">null</span></B>) {
                <B><span class="code-lang">return</span></B> <B><span class="code-lang">null</span></B>;
        }
        
        <B><span class="code-lang">switch</span></B> ( node.getNodeType() )
        {
            <B><span class="code-lang">case</span></B> nsIDOMNode.ELEMENT_NODE:
                <I><span class="code-comment">// Use our factory to obtain a W3C HTML DOM element
</span></I>                Node htmlElement = HTMLElementFactory.getHTMLElement(node);
                <B><span class="code-lang">if</span></B> (htmlElement != <B><span class="code-lang">null</span></B>) {
                        <B><span class="code-lang">return</span></B> htmlElement;
                } <B><span class="code-lang">else</span></B> {
                        <I><span class="code-comment">// If factory cannot convert the concrete node (for instance, 
</span></I>                        <I><span class="code-comment">// the type is unknown for our factory implementation), then
</span></I>                        <I><span class="code-comment">// returns a generic W3C DOM element
</span></I>                        <B><span class="code-lang">return</span></B> ElementImpl.getDOMInstance((nsIDOMElement) node
                                        .queryInterface(nsIDOMElement.NS_IDOMELEMENT_IID));
                }
...


</pre></div></li></ul><blockquote>
<blockquote>
<p>
Below you have a complete copy of NodeFactory class java file:
</p>
<div class="code"><pre><I><span class="code-comment">/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the &quot;License&quot;); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an &quot;AS IS&quot; basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is mozdom4java
 *
 * The Initial Developer of the Original Code is
 * Peter Szinek, Lixto Software GmbH, http://www.lixto.com.
 * Portions created by the Initial Developer are Copyright (C) 2005-2006
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *  Peter Szinek (peter@rubyrailways.com)
 *  Michal Ceresna (michal.ceresna@gmail.com)
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the &quot;GPL&quot;), or
 * the GNU Lesser General Public License Version 2.1 or later (the &quot;LGPL&quot;),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */</span></I>

<B><span class="code-lang">import</span></B> org.w3c.dom.Node;
<B><span class="code-lang">import</span></B> org.mozilla.dom.*;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.*;

<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> NodeFactory
{
        <B><span class="code-lang">private</span></B> NodeFactory()
        {}
        
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> Node getNodeInstance( nsIDOMEventTarget eventTarget )
        {
                <B><span class="code-lang">if</span></B> (eventTarget == <B><span class="code-lang">null</span></B> ) {
                        <B><span class="code-lang">return</span></B> <B><span class="code-lang">null</span></B>;
                }

        nsIDOMNode node = (nsIDOMNode) eventTarget.queryInterface(nsIDOMNode.NS_IDOMNODE_IID);
        <B><span class="code-lang">return</span></B> getNodeInstance(node);
    }
   
    <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> Node getNodeInstance( nsIDOMNode node )
    {
        <B><span class="code-lang">if</span></B> (node == <B><span class="code-lang">null</span></B>) {
                <B><span class="code-lang">return</span></B> <B><span class="code-lang">null</span></B>;
        }
        
        <B><span class="code-lang">switch</span></B> ( node.getNodeType() )
        {
            <B><span class="code-lang">case</span></B> nsIDOMNode.ELEMENT_NODE:
                <I><span class="code-comment">// Use our factory to obtain a W3C HTML DOM element
</span></I>                Node htmlElement = HTMLElementFactory.getHTMLElement(node);
                <B><span class="code-lang">if</span></B> (htmlElement != <B><span class="code-lang">null</span></B>) {
                        <B><span class="code-lang">return</span></B> htmlElement;
                } <B><span class="code-lang">else</span></B> {
                        <I><span class="code-comment">// If factory cannot convert the concrete node (for instance, 
</span></I>                        <I><span class="code-comment">// the type is unknown for our factory implementation), then
</span></I>                        <I><span class="code-comment">// returns a generic W3C DOM element
</span></I>                        <B><span class="code-lang">return</span></B> ElementImpl.getDOMInstance((nsIDOMElement) node
                                        .queryInterface(nsIDOMElement.NS_IDOMELEMENT_IID));
                }
            <B><span class="code-lang">case</span></B> nsIDOMNode.ATTRIBUTE_NODE: <B><span class="code-lang">return</span></B> AttrImpl.getDOMInstance((nsIDOMAttr) node.queryInterface(nsIDOMAttr.NS_IDOMATTR_IID));
            <B><span class="code-lang">case</span></B> nsIDOMNode.TEXT_NODE: <B><span class="code-lang">return</span></B> TextImpl.getDOMInstance((nsIDOMText) node.queryInterface(nsIDOMText.NS_IDOMTEXT_IID));
            <B><span class="code-lang">case</span></B> nsIDOMNode.CDATA_SECTION_NODE: <B><span class="code-lang">return</span></B> CDATASectionImpl.getDOMInstance((nsIDOMCDATASection) node.queryInterface(nsIDOMCDATASection.NS_IDOMCDATASECTION_IID));
            <B><span class="code-lang">case</span></B> nsIDOMNode.ENTITY_REFERENCE_NODE: <B><span class="code-lang">return</span></B> EntityReferenceImpl.getDOMInstance((nsIDOMEntityReference) node.queryInterface(nsIDOMEntityReference.NS_IDOMENTITYREFERENCE_IID));   
            <B><span class="code-lang">case</span></B> nsIDOMNode.ENTITY_NODE: <B><span class="code-lang">return</span></B> EntityImpl.getDOMInstance((nsIDOMEntity) node.queryInterface(nsIDOMEntity.NS_IDOMENTITY_IID));
            <B><span class="code-lang">case</span></B> nsIDOMNode.PROCESSING_INSTRUCTION_NODE: <B><span class="code-lang">return</span></B> ProcessingInstructionImpl.getDOMInstance((nsIDOMProcessingInstruction) node.queryInterface(nsIDOMProcessingInstruction.NS_IDOMPROCESSINGINSTRUCTION_IID));
            <B><span class="code-lang">case</span></B> nsIDOMNode.COMMENT_NODE: <B><span class="code-lang">return</span></B> CommentImpl.getDOMInstance((nsIDOMComment) node.queryInterface(nsIDOMComment.NS_IDOMCOMMENT_IID));
            <B><span class="code-lang">case</span></B> nsIDOMNode.DOCUMENT_NODE: <B><span class="code-lang">return</span></B> DocumentImpl.getDOMInstance((nsIDOMDocument) node.queryInterface(nsIDOMDocument.NS_IDOMDOCUMENT_IID));
            <B><span class="code-lang">case</span></B> nsIDOMNode.DOCUMENT_TYPE_NODE: <B><span class="code-lang">return</span></B> DocumentTypeImpl.getDOMInstance((nsIDOMDocumentType) node.queryInterface(nsIDOMDocumentType.NS_IDOMDOCUMENTTYPE_IID));
            <B><span class="code-lang">case</span></B> nsIDOMNode.DOCUMENT_FRAGMENT_NODE: <B><span class="code-lang">return</span></B> DocumentFragmentImpl.getDOMInstance((nsIDOMDocumentFragment) node.queryInterface(nsIDOMDocumentFragment.NS_IDOMDOCUMENTFRAGMENT_IID));
            <B><span class="code-lang">case</span></B> nsIDOMNode.NOTATION_NODE: <B><span class="code-lang">return</span></B> NotationImpl.getDOMInstance((nsIDOMNotation) node.queryInterface(nsIDOMNotation.NS_IDOMNOTATION_IID));
            <B><span class="code-lang">default</span></B>: <B><span class="code-lang">return</span></B> NodeImpl.getDOMInstance(node);
        }
    }
    
    <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> nsIDOMNode getnsIDOMNode( Node node )
    {
        <B><span class="code-lang">if</span></B> (node <B><span class="code-lang">instanceof</span></B> NodeImpl) {
            NodeImpl ni = (NodeImpl) node;
            <B><span class="code-lang">return</span></B> ni.getInstance();
        }
        <B><span class="code-lang">else</span></B> {      
            <B><span class="code-lang">return</span></B> <B><span class="code-lang">null</span></B>;
        }
    }
    
    <B><span class="code-lang">private</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">boolean</span></B> toLower = <B><span class="code-lang">true</span></B>;
    <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">boolean</span></B> getConvertNodeNamesToLowerCase()
    {
        <B><span class="code-lang">return</span></B> toLower;
    }
    <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> setConvertNodeNamesToLowerCase(<B><span class="code-lang">boolean</span></B> convert)
    {
        toLower = convert;
    }

    <B><span class="code-lang">private</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">boolean</span></B> expandFrames = <B><span class="code-lang">false</span></B>;
    <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">boolean</span></B> getExpandFrames()
    {
        <B><span class="code-lang">return</span></B> expandFrames;
    }
    <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> setExpandFrames(<B><span class="code-lang">boolean</span></B> expand)
    {
        expandFrames = expand;
    }

}
</pre></div></blockquote>
</blockquote>
<ul><li>Finally we need to do a change in <tt>ElementImpl</tt> class. That class has two methods, <tt>public String getAttribute(String name)</tt> and <tt>public String getTagName()</tt> which use the String class method <tt>toLowerCase</tt> over their results. That could cause problems with case sensitive code, for instance, an attribute in an anchor node could be <tt>onclick</tt> containing <i>javascript</i> code. If we need to execute that <i>javascript</i> code, we need case sensitivity, because javascript has it. We have to change only two lines in <tt>ElementImpl.java</tt> file, showed below:
<div class="code"><pre> ...
          <B><span class="code-lang">public</span></B> String getAttribute(<B><span class="code-lang">final</span></B> String name)
    {
        <I><span class="code-comment">//METHOD-BODY-START - autogenerated code
</span></I>        Callable&lt;String&gt; c = <B><span class="code-lang">new</span></B> Callable&lt;String&gt;() { <B><span class="code-lang">public</span></B> String call() {
            String result = getInstanceAsnsIDOMElement().getAttribute(name);
            <B><span class="code-lang">return</span></B> result;
        }};
        <B><span class="code-lang">return</span></B> ThreadProxy.getSingleton().syncExec(c);
        <I><span class="code-comment">//METHOD-BODY-END - autogenerated code
</span></I>    }

      ...
          <B><span class="code-lang">public</span></B> String getTagName()
    {
        <I><span class="code-comment">//METHOD-BODY-START - autogenerated code
</span></I>        Callable&lt;String&gt; c = <B><span class="code-lang">new</span></B> Callable&lt;String&gt;() { <B><span class="code-lang">public</span></B> String call() {
            String result = getInstanceAsnsIDOMElement().getTagName();
            <B><span class="code-lang">return</span></B> result;
        }};
        <B><span class="code-lang">return</span></B> ThreadProxy.getSingleton().syncExec(c);
        <I><span class="code-comment">//METHOD-BODY-END - autogenerated code
</span></I>    }
      ...
</pre></div></li></ul><h3 id="a6.3InstallingourpatchtoconvertMozillaDOMTreeintoW3CDOMTree">6.3 Installing our patch to convert Mozilla DOM Tree into W3C DOM Tree</h3>
<p>
Uncompress the sources and download the <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/mozdom4java_patch.diff">patch</a>. Then, from the directory containing the <tt>src</tt> directory, you must execute from command line:
</p>
<ul><li>For Linux
<pre class="wiki">patch -p0 &lt; moz4java_patch.diff
</pre></li><li>For Windows
<pre class="wiki">   AVAILABLE SOON
</pre></li></ul><p>
Now you can compile the <i>mozdom4java</i> library adding to your <tt>classpath</tt> the following jar files:
</p>
<ul><li><strong>w3chtml.jar</strong> <a class="ext-link" href="http://www.mozdev.org/source/browse/~checkout~/mozdom4java/src/jars/w3chtml.jar?rev=1.1&amp;content-type=text/plain"><span class="icon">latest version when this guide was written</span></a>. Contains W3C DOM HTML level 2 interfaces into two different packages, <tt>org.w3c.dom.html</tt> and <tt>org.w3c.dom.html2</tt>. You can find a copy at the end of the page.
</li><li><strong>w3cextension.jar</strong> <a class="ext-link" href="http://www.mozdev.org/source/browse/~checkout~/mozdom4java/src/jars/w3cextension.jar?rev=1.1&amp;content-type=text/plain"><span class="icon">latest version when this guide was written</span></a>. Contains <tt>KeyEvent</tt> class into the <tt>org.w3c.dom.events</tt> package. You can find a copy at the end of the page.
</li><li><strong>MozillaInterfaces.jar</strong>: For more information about where you can find that jar, please, read section 2 from this guide.
</li><li><strong>MozillaGlue.jar</strong>: For more information about where you can find that jar, please, read section 2 from this guide.
</li></ul><p>
Once you have added these jars to your <tt>classpath</tt>, the <i>mozdom4java</i> library must compile fine (without errors, although some warnings could be launched). We recommend create a jar file with <i>mozdom4java</i> patched version that can be easily added to the <tt>classpath</tt> of any project you need.
</p>
<h3 id="a6.4Testingthepatchedlibrary">6.4 Testing the patched library</h3>
<p>
First, configure your <tt>classpath</tt> including the patched library version. Following with the example seen previously, now we can write the code in such a way that is much more readable, because we don't use Mozilla DOM node methods explicitely to convert the Mozilla node into a W3C node.
</p>
<div class="code"><pre>...

<B><span class="code-lang">import</span></B> org.mozilla.dom.NodeFactory;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.*;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLAnchorElement;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLElement;

...

                <B><span class="code-lang">final</span></B> ToolItem anchorItem = <B><span class="code-lang">new</span></B> ToolItem(toolbar, SWT.PUSH);
                anchorItem.setImage(getImage(<B><span class="code-string">&quot;resources/anchors.png&quot;</span></B>));
                anchorItem.addSelectionListener(<B><span class="code-lang">new</span></B> SelectionAdapter() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> widgetSelected(SelectionEvent event) {
                        
<I><span class="code-comment">//                               First, we obtain a Mozilla DOM Document representation
</span></I>                                nsIWebBrowser webBrowser = (nsIWebBrowser)browser.getWebBrowser();
                                <B><span class="code-lang">if</span></B> (webBrowser == <B><span class="code-lang">null</span></B>) {
                                        System.out.println(<B><span class="code-string">&quot;Could not get the nsIWebBrowser from the Browser widget&quot;</span></B>);
                                }       
                        
                                nsIDOMWindow window = webBrowser.getContentDOMWindow();
                                nsIDOMDocument doc = window.getDocument();
                                System.out.println(doc);
                        
                        <I><span class="code-comment">// Get all anchors from the loaded HTML document
</span></I>                        nsIDOMNodeList nodeList = doc.getElementsByTagName(<B><span class="code-string">&quot;a&quot;</span></B>);
                        
                        analyzeAnchors(nodeList);
                        
                }

                        <B><span class="code-lang">private</span></B> <B><span class="code-lang">void</span></B> analyzeAnchors(nsIDOMNodeList nodeList) {
                        <B><span class="code-lang">for</span></B> (<B><span class="code-lang">int</span></B> i = 0; i &lt; nodeList.getLength(); i++) {

                                <I><span class="code-comment">// Get Mozilla DOM node
</span></I>                                nsIDOMNode mozNode = nodeList.item(i);

                                <I><span class="code-comment">// We are supposing that the NodeList contains only HTMLElements
</span></I>                                <I><span class="code-comment">// because we only call this method over HTML nodes
</span></I>                                <I><span class="code-comment">// (NodeFactory.getNodeInstance could returns another node
</span></I>                                <I><span class="code-comment">//  descendants, depends on the input Mozilla DOM node)
</span></I>                                HTMLElement htmlElement = (HTMLElement) NodeFactory.getNodeInstance(mozNode);

                                <I><span class="code-comment">// We only are interested in anchors
</span></I>                                <B><span class="code-lang">if</span></B> (htmlElement <B><span class="code-lang">instanceof</span></B> HTMLAnchorElement) {
                                                
                                        HTMLAnchorElement a = (HTMLAnchorElement) htmlElement;
                                                
                                        <I><span class="code-comment">// Test the HTML element
</span></I>                                        System.out.println(<B><span class="code-string">&quot;Tag Name: &quot;</span></B> + a.getNodeName()
                                                        + <B><span class="code-string">&quot; -- Text: &quot;</span></B> + a.getTextContent()
                                                        + <B><span class="code-string">&quot; -- Href: &quot;</span></B> + a.getHref());
                                }

                        }
                }
                
        });
                

...

</pre></div><h2 id="a7.JavaXPCOMtoautomatedwebnavigation">7. JavaXPCOM to automated web navigation</h2>
<p>
In this section we propose some implementation techniques to solve more common problems you find during automated web navigation, trying to abstract common tasks into methods with a human readable name, so you can easily read the code and you know its functionality. Doing this, build a web browser that is able to load web pages, click on buttons or hyperlinks or extract some information using Xpaths, becomes an easy task. In every subsection we will include a new functionality to our web browser, so at the end, we have a web browser which will be prepared to automated web navigation.
</p>
<p>
If you wish, you can download all the examples for chapters 4 to 7 <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-src.zip">here</a>. Also, you can download the <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-bin-win.zip">windows binaries</a> or the <a class="source" href="/wiki/browser/../attachment/wiki/XPCOMGuide/LadyrBrowser-bin-linux.zip">linux binaries</a>.
</p>
<h3 id="a7.1LoadingPagesWithOurBrowser">7.1 Loading Pages With Our Browser</h3>
<p>
In our <tt>SimpleBrowser</tt> example we are using the method <tt>public boolean setUrl(String url)</tt> to load an URL into the web browser. That method has the problem that grants the browser start loading the page, but doesn't wait until the page is totally loaded in the browser. We write a method called <tt>go</tt> adding this functionality, so in advance we will use go to load page in a safe way, blocking the execution flow till the page is loaded in the browser or a given timeout is finished (because the browser may have problems during loading and delay the application for a nonreasonable time).
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.browser;


<B><span class="code-lang">import</span></B> java.util.concurrent.CountDownLatch;
<B><span class="code-lang">import</span></B> java.util.concurrent.TimeUnit;

<B><span class="code-lang">import</span></B> org.eclipse.swt.SWT;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressEvent;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressListener;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Display;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Shell;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.Browser;
<B><span class="code-lang">import</span></B> org.eclipse.swt.SWTError;


<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> SimpleBrowserWithGo {
        
        <I><span class="code-comment">// We will need SWT display to execute methods
</span></I>        <I><span class="code-comment">// into the SWT event thread.
</span></I>        
                Browser browser;
        <B><span class="code-lang">private</span></B> Display display;
        
        <I><span class="code-comment">// Latch used to manage page loading
</span></I>        <I><span class="code-comment">// Uses a count of 1, so when the browser starts loading
</span></I>        <I><span class="code-comment">// a page, we create a new latch, which will be 
</span></I>        <I><span class="code-comment">// decremented when the page is loaded.
</span></I>        <B><span class="code-lang">private</span></B> CountDownLatch latch;
        

        <I><span class="code-comment">// Default timeout to 60 seconds
</span></I>        <B><span class="code-lang">private</span></B> <B><span class="code-lang">long</span></B> defaultTimeout = 60000;

        <I><span class="code-comment">/**
         * Creates a web browser which is able to load pages waiting until
         * the page is completely loaded.
         *
         */</span></I>
        <B><span class="code-lang">public</span></B> SimpleBrowserWithGo (<B><span class="code-lang">final</span></B> String xulrunnerPath) {
                
                <I><span class="code-comment">// Use a latch to wait for the browser initialization.
</span></I>                <B><span class="code-lang">final</span></B> CountDownLatch initLatch = <B><span class="code-lang">new</span></B> CountDownLatch(1);
                
                
                
                <I><span class="code-comment">// MozillaBrowser needs a window manager to work. We are using SWT
</span></I>                <I><span class="code-comment">// for the graphical interface, so we need to execute MozillaBrowser
</span></I>                <I><span class="code-comment">// methods into the SWT event thread. If we were use another thread,
</span></I>                <I><span class="code-comment">// that methods could not work properly and throw an exception,
</span></I>                <I><span class="code-comment">// breaking the execution flow and crashing our application.
</span></I>                <B><span class="code-lang">new</span></B> Thread(<B><span class="code-string">&quot;SWT-Event-Thread&quot;</span></B>) {
                        @Override
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {
                                        
                                display = <B><span class="code-lang">new</span></B> Display();
                                Shell shell = <B><span class="code-lang">new</span></B> Shell(display);

                                shell.setSize(800, 600);
                                shell.open();

                                <I><span class="code-comment">// If you have XULRunner installed, you can call the constructor without
</span></I>                                <I><span class="code-comment">// the last parameter:
</span></I>                                <I><span class="code-comment">//
</span></I>                                <I><span class="code-comment">// final MozillaBrowser browser = new MozillaBrowser(shell,SWT.BORDER);
</span></I>                                <I><span class="code-comment">//
</span></I>                                <I><span class="code-comment">// That last parameter is the path for XULRunner files
</span></I>                                <I><span class="code-comment">// (where you have uncompressed downloaded XULRunner package).
</span></I>                                <B><span class="code-lang">try</span></B> {
                                                browser = <B><span class="code-lang">new</span></B> Browser(shell, SWT.MOZILLA);
                                        } <B><span class="code-lang">catch</span></B> (SWTError e) {
                                                System.out.println(<B><span class="code-string">&quot;Could not instantiate Browser: &quot;</span></B> + e.getMessage());
                                                <B><span class="code-lang">return</span></B>;
                                        }
                                
                                
                                <I><span class="code-comment">// Adapt browser size to shell size
</span></I>                                browser.setBounds(shell.getClientArea());
                                
                                <I><span class="code-comment">// Listens for page loading status.
</span></I>                                browser.addProgressListener(<B><span class="code-lang">new</span></B> ProgressListener() {
                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> changed(ProgressEvent event) {
                                        }

                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> completed(ProgressEvent event) {
                                                <I><span class="code-comment">// When a page is loaded, decrement the latch,
</span></I>                                                <I><span class="code-comment">// which count will be 0 after this call.
</span></I>                                                latch.countDown();
                                        }
                                });
                                
                                <I><span class="code-comment">// Realease the initialization latch, which has value 1,
</span></I>                                <I><span class="code-comment">// so after this call its value will be 0.
</span></I>                                initLatch.countDown();
                                
                                <B><span class="code-lang">while</span></B> (!shell.isDisposed()) {
                                        <B><span class="code-lang">if</span></B> (!display.readAndDispatch()) {
                                                display.sleep();
                                        }
                                }

                                System.exit(0);
                        }
                }.start();
                
                <B><span class="code-lang">try</span></B> {
                        <I><span class="code-comment">// Waits until the initialization latch is released.
</span></I>                        initLatch.await();
                } <B><span class="code-lang">catch</span></B> (InterruptedException e) {
                        Thread.interrupted();
                }               
        }
        
        <I><span class="code-comment">/**
         * Loads an URL into the browser and waits until the page is
         * totally loaded.
         * @param url
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> go(<B><span class="code-lang">final</span></B> String url) <B><span class="code-lang">throws</span></B> SimpleBrowserException {
                
                <I><span class="code-comment">// Creates a latch with count 1
</span></I>                latch = <B><span class="code-lang">new</span></B> CountDownLatch(1);

                <I><span class="code-comment">// Uses the SWT event thread to execute the method to
</span></I>                <I><span class="code-comment">// load an URL in the browser.
</span></I>                display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {
                                browser.setUrl(url);
                        }
                });
                
                <I><span class="code-comment">// Waits for the finish of the page loading, or for a given
</span></I>                <I><span class="code-comment">// timeout in case that the loading doesn't finish in a 
</span></I>                <I><span class="code-comment">// reasonable time.
</span></I>                <B><span class="code-lang">boolean</span></B> timeout = waitLoad(defaultTimeout);
                <B><span class="code-lang">if</span></B> (timeout) {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> SimpleBrowserException(<B><span class="code-string">&quot;Timeout waiting page loading.&quot;</span></B>);
                }

        }
        
        <B><span class="code-lang">private</span></B> <B><span class="code-lang">boolean</span></B> waitLoad(<B><span class="code-lang">long</span></B> millis) {
                <B><span class="code-lang">try</span></B> {
                        <I><span class="code-comment">// Uses the latch, created by 'go' method to wait for
</span></I>                        <I><span class="code-comment">// the finish of the page loading (it will occurs when
</span></I>                        <I><span class="code-comment">// our 'progressListener' receives a event for its method 
</span></I>                        <I><span class="code-comment">// 'completed'), or for a given timeout in case that the
</span></I>
                        <I><span class="code-comment">// loading doesn't finish in a reasonable time.
</span></I>                        <B><span class="code-lang">boolean</span></B> timeout;
                        timeout = !latch.await(millis,TimeUnit.MILLISECONDS);

                        <B><span class="code-lang">if</span></B> (timeout) {
                                <I><span class="code-comment">// If the timeout expired, then we will stop
</span></I>                                <I><span class="code-comment">// page loading.
</span></I>                                display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {
                                                browser.stop();
                                        }
                                });
                                <I><span class="code-comment">// Waits for the loading is stopped
</span></I>                                latch.await(millis,TimeUnit.MILLISECONDS);
                        }
                        <B><span class="code-lang">return</span></B> timeout;
                } <B><span class="code-lang">catch</span></B> (InterruptedException e) {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> Error(e);
                }
        }
        
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String[] args) {

                String xulrunnerPath = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">if</span></B> ( args.length &gt; 0 ) {
                        xulrunnerPath = args[0];
                }
                
                <I><span class="code-comment">// Instantiate our simple web browser
</span></I>                SimpleBrowserWithGo simpleBrowser = <B><span class="code-lang">new</span></B> SimpleBrowserWithGo(xulrunnerPath);
        
                <B><span class="code-lang">try</span></B>{
                        <I><span class="code-comment">// Use the new functionality to load some URLs
</span></I>                        <I><span class="code-comment">// with our browser.
</span></I>                        simpleBrowser.go(<B><span class="code-string">&quot;http://www.google.com&quot;</span></B>);
                        Thread.sleep(3000);
                        simpleBrowser.go(<B><span class="code-string">&quot;http://www.urjc.es&quot;</span></B>);
                        Thread.sleep(3000);
                        simpleBrowser.go(<B><span class="code-string">&quot;http://www.mozilla.org&quot;</span></B>);
                        Thread.sleep(3000);
                        
                } <B><span class="code-lang">catch</span></B> (SimpleBrowserException e) {
                        System.err.println(<B><span class="code-string">&quot;Problems calling go method.&quot;</span></B>);
                        e.printStackTrace();
                } <B><span class="code-lang">catch</span></B> (InterruptedException e) {
                        System.err.println(<B><span class="code-string">&quot;Problems calling sleep.&quot;</span></B>);
                        e.printStackTrace();
                        Thread.interrupted();
                }
                                                
                Runtime.getRuntime().halt(0);
                
        }
        
}
</pre></div><h3 id="a7.2SolvingXPathstoObtainW3CNodes">7.2 Solving XPaths to Obtain W3C Nodes</h3>
<p>
Once we have a HTML page loaded in the browser, we could need to access to its DOM nodes to extract information. Previously we wrote a entire chapter about how to deal with Mozilla nodes and convert them into W3C nodes. Now we use that conversion to obtain nodes in a standard way, working only with W3C nodes. We implement methods to create a XPath evaluator for our browser and a XPath resolver for the concrete document from which we want to extract nodes. When the Xpath evaluator returns a result, we convert every returned DOM node into its corresponding W3C DOM element implementation calling to <tt>public static Node getNodeInstance( nsIDOMNode node )</tt> from our<i>mozdom4java</i> patched library. Therefore, a user who works with our browser directly could call the following methods:
</p>
<div class="code"><pre>...

<B><span class="code-lang">import</span></B> org.w3c.dom.Node;

...

<I><span class="code-comment">/**
 * 
 * @param xpath
 * @return      a list with the nodes corresponding to a given xpath.
 * @throws SimpleBrowserException
 */</span></I>
<B><span class="code-lang">public</span></B> List&lt;Node&gt; xpathNodes(String xpath) {

...

<I><span class="code-comment">/**
 * 
 * @param &lt;T&gt;
 * @param xpath
 * @param nodeClass
 * @return      a list of &lt;code&gt;nodeClass&lt;/code&gt; nodes corresponding
 *      to a given xpath.
 * @throws SimpleBrowserException
 */</span></I>
<B><span class="code-lang">public</span></B> &lt;T <B><span class="code-lang">extends</span></B> Node&gt; List&lt;T&gt; xpathNodes(String xpath, Class&lt;T&gt; nodeClass) {

...
</pre></div><p>
And convert the result nodes into HTMLElements with a cast, as we will see in the complete example showed below:
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.browser;

<B><span class="code-lang">import</span></B> java.util.ArrayList;
<B><span class="code-lang">import</span></B> java.util.List;
<B><span class="code-lang">import</span></B> java.util.concurrent.CountDownLatch;
<B><span class="code-lang">import</span></B> java.util.concurrent.TimeUnit;

<B><span class="code-lang">import</span></B> org.eclipse.swt.SWT;
<B><span class="code-lang">import</span></B> org.eclipse.swt.SWTError;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.Browser;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressEvent;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressListener;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Display;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Shell;

<B><span class="code-lang">import</span></B> org.mozilla.dom.NodeFactory;
<B><span class="code-lang">import</span></B> org.mozilla.dom.html.HTMLDocumentImpl;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIComponentManager;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMDocument;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMHTMLDocument;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMNode;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMWindow;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMXPathEvaluator;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMXPathNSResolver;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMXPathResult;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsISupports;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIWebBrowser;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.Mozilla;
<B><span class="code-lang">import</span></B> org.w3c.dom.Node;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLAnchorElement;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLDocument;


<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> SimpleBrowserWithXPath {
        
        <B><span class="code-lang">private</span></B> <B><span class="code-lang">final</span></B> <B><span class="code-lang">static</span></B> String NS_IDOMXPATHEVALUATOR_CONTRACTID = <B><span class="code-string">&quot;@mozilla.org/dom/xpath-evaluator;1&quot;</span></B>;
        
        <B><span class="code-lang">private</span></B> Browser browser;
        
        <I><span class="code-comment">// We will need SWT display to execute methods
</span></I>        <I><span class="code-comment">// into the SWT event thread.
</span></I>        <B><span class="code-lang">private</span></B> Display display;
        
        
        <I><span class="code-comment">// Latch used to manage page loading
</span></I>        <I><span class="code-comment">// Uses a count of 1, so when the browser starts loading
</span></I>        <I><span class="code-comment">// a page, we create a new latch, which will be 
</span></I>        <I><span class="code-comment">// decremented when the page is loaded.
</span></I>        <B><span class="code-lang">private</span></B> CountDownLatch latch;
        
        <I><span class="code-comment">// Default timeout to 60 seconds
</span></I>        <B><span class="code-lang">private</span></B> <B><span class="code-lang">long</span></B> defaultTimeout = 60000;
        
        <I><span class="code-comment">// XPath evaluator
</span></I>        <B><span class="code-lang">private</span></B> nsIDOMXPathEvaluator xpathEval;

        <I><span class="code-comment">/**
         * Creates a web browser which is able to load pages waiting until
         * the page is completely loaded and solve xpaths returning
         * the corresponding nodes.
         *
         */</span></I>
        <B><span class="code-lang">public</span></B> SimpleBrowserWithXPath (<B><span class="code-lang">final</span></B> String xulrunnerPath) {
                
                <I><span class="code-comment">// Use a latch to wait for the browser initialization.
</span></I>                <B><span class="code-lang">final</span></B> CountDownLatch initLatch = <B><span class="code-lang">new</span></B> CountDownLatch(1);
                
                
                <I><span class="code-comment">// MozillaBrowser needs a window manager to work. We are using SWT
</span></I>                <I><span class="code-comment">// for the graphical interface, so we need to execute MozillaBrowser
</span></I>                <I><span class="code-comment">// methods into the SWT event thread. If we were use another thread,
</span></I>                <I><span class="code-comment">// that methods could not work properly and throw an exception,
</span></I>                <I><span class="code-comment">// breaking the execution flow and crashing our application.
</span></I>                <B><span class="code-lang">new</span></B> Thread(<B><span class="code-string">&quot;SWT-Event-Thread&quot;</span></B>) {
                        @Override
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {

                                        display = <B><span class="code-lang">new</span></B> Display();
                                Shell shell = <B><span class="code-lang">new</span></B> Shell(display);

                                shell.setSize(800, 600);
                                shell.open();

                                <I><span class="code-comment">// If you have XULRunner installed, you can call the constructor without
</span></I>                                <I><span class="code-comment">// the last parameter:
</span></I>                                <I><span class="code-comment">//
</span></I>                                <I><span class="code-comment">// final MozillaBrowser browser = new MozillaBrowser(shell,SWT.BORDER);
</span></I>                                <I><span class="code-comment">//
</span></I>                                <I><span class="code-comment">// That last parameter is the path for XULRunner files
</span></I>                                <I><span class="code-comment">// (where you have uncompressed downloaded XULRunner package).
</span></I>                                <B><span class="code-lang">try</span></B> {
                                                browser = <B><span class="code-lang">new</span></B> Browser(shell, SWT.MOZILLA);
                                        } <B><span class="code-lang">catch</span></B> (SWTError e) {
                                                System.out.println(<B><span class="code-string">&quot;Could not instantiate Browser: &quot;</span></B> + e.getMessage());
                                                <B><span class="code-lang">return</span></B>;
                                        }
                                
                                
                                <I><span class="code-comment">// Adapt browser size to shell size
</span></I>                                browser.setBounds(shell.getClientArea());
                                
                                <I><span class="code-comment">// Listens for page loading status.
</span></I>                                browser.addProgressListener(<B><span class="code-lang">new</span></B> ProgressListener() {
                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> changed(ProgressEvent event) {
                                        }

                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> completed(ProgressEvent event) {
                                                <I><span class="code-comment">// When a page is loaded, decrement the latch,
</span></I>                                                <I><span class="code-comment">// which count will be 0 after this call.
</span></I>                                                latch.countDown();
                                        }
                                });
                                
                                <I><span class="code-comment">// Realease the initialization latch, which has value 1,
</span></I>                                <I><span class="code-comment">// so after this call its value will be 0.
</span></I>                                initLatch.countDown();
                                
                                <B><span class="code-lang">while</span></B> (!shell.isDisposed()) {
                                        <B><span class="code-lang">if</span></B> (!display.readAndDispatch()) {
                                                display.sleep();
                                        }
                                }

                                System.exit(0);
                        }
                }.start();
                
                <B><span class="code-lang">try</span></B> {
                        <I><span class="code-comment">// Waits until the initialization latch is released.
</span></I>                        initLatch.await();
                } <B><span class="code-lang">catch</span></B> (InterruptedException e) {
                        Thread.interrupted();
                }
                
                <I><span class="code-comment">// Creates the XPath evaluator XPCOM component
</span></I>                Mozilla moz = Mozilla.getInstance();
                nsIComponentManager componentManager = moz.getComponentManager();
                xpathEval = (nsIDOMXPathEvaluator) componentManager.createInstanceByContractID(
                                                NS_IDOMXPATHEVALUATOR_CONTRACTID, <B><span class="code-lang">null</span></B>, nsIDOMXPathEvaluator.NS_IDOMXPATHEVALUATOR_IID);
                
        }
        
        <I><span class="code-comment">/**
         * Loads an URL into the browser and waits until the page is
         * totally loaded.
         * @param url
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> go(<B><span class="code-lang">final</span></B> String url) <B><span class="code-lang">throws</span></B> SimpleBrowserException {
                
                <I><span class="code-comment">// Creates a latch with count 1
</span></I>                latch = <B><span class="code-lang">new</span></B> CountDownLatch(1);

                <I><span class="code-comment">// Uses the SWT event thread to execute the method to
</span></I>                <I><span class="code-comment">// load an URL in the browser.
</span></I>                display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {
                                browser.setUrl(url);
                        }
                });
                
                <I><span class="code-comment">// Waits for the finish of the page loading, or for a given
</span></I>                <I><span class="code-comment">// timeout in case that the loading doesn't finish in a 
</span></I>                <I><span class="code-comment">// reasonable time.
</span></I>                <B><span class="code-lang">boolean</span></B> timeout = waitLoad(defaultTimeout);
                <B><span class="code-lang">if</span></B> (timeout) {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> SimpleBrowserException(<B><span class="code-string">&quot;Timeout waiting page loading.&quot;</span></B>);
                }

        }
        
        <I><span class="code-comment">/**
         * 
         * @return      an W3C HTML Document implementation corresponding to
         *      the Mozilla DOM HTML document currently loaded in the browser.
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> HTMLDocument getW3CDocument() {
                
   <I><span class="code-comment">//           System.out.println(&quot;El browser es &quot; + browser.toString());
</span></I>                
                <B><span class="code-lang">class</span></B> DocumentGetter <B><span class="code-lang">implements</span></B> Runnable {
                        <B><span class="code-lang">private</span></B> nsIDOMHTMLDocument htmldoc;

                                <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run(){
                nsIWebBrowser webBrowser = (nsIWebBrowser)browser.getWebBrowser();
                        <B><span class="code-lang">if</span></B> (webBrowser == <B><span class="code-lang">null</span></B>) {
                                System.out.println(<B><span class="code-string">&quot;Could not get the nsIWebBrowser from the Browser widget&quot;</span></B>);
                        }       
        
                        nsIDOMWindow dw = webBrowser.getContentDOMWindow();

                nsIDOMDocument nsDoc = dw.getDocument();

                htmldoc = (nsIDOMHTMLDocument) nsDoc
                                                                .queryInterface(nsIDOMHTMLDocument.NS_IDOMHTMLDOCUMENT_IID);
                
                }

                                <B><span class="code-lang">public</span></B> nsIDOMHTMLDocument getHtmldoc() {
                                        <I><span class="code-comment">// TODO Auto-generated method stub
</span></I>                                        <B><span class="code-lang">return</span></B> htmldoc;
                                }}
                
                DocumentGetter dg = <B><span class="code-lang">new</span></B> DocumentGetter();
                
                display.syncExec(dg);
                
                
                
                <B><span class="code-lang">return</span></B> HTMLDocumentImpl.getDOMInstance(dg.getHtmldoc());
        }
        
        <I><span class="code-comment">/**
         * 
         * @param xpath
         * @return      a list with the nodes corresponding to a given xpath.
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> List&lt;Node&gt; xpathNodes(String xpath) {
                <B><span class="code-lang">return</span></B> xPathNodes(xpath, 
                                ((HTMLDocumentImpl) getW3CDocument()).getInstance());           
        }
        
        <I><span class="code-comment">/**
         * 
         * @param &lt;T&gt;
         * @param xpath
         * @param nodeClass
         * @return      a list of &lt;code&gt;nodeClass&lt;/code&gt; nodes corresponding
         *      to a given xpath.
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> &lt;T <B><span class="code-lang">extends</span></B> Node&gt; List&lt;T&gt; xpathNodes(String xpath, Class&lt;T&gt; nodeClass) {
                <B><span class="code-lang">return</span></B> (List&lt;T&gt;)xPathNodes(xpath,
                                ((HTMLDocumentImpl) getW3CDocument()).getInstance());
        }       
        
        <B><span class="code-lang">private</span></B> <B><span class="code-lang">boolean</span></B> waitLoad(<B><span class="code-lang">long</span></B> millis) {
                <B><span class="code-lang">try</span></B> {
                        <I><span class="code-comment">// Uses the latch, created by 'go' method to wait for
</span></I>                        <I><span class="code-comment">// the finish of the page loading (it will occurs when
</span></I>                        <I><span class="code-comment">// our 'progressListener' receives a event for its method 
</span></I>                        <I><span class="code-comment">// 'completed'), or for a given timeout in case that the
</span></I>                        <I><span class="code-comment">// loading doesn't finish in a reasonable time.
</span></I>                        <B><span class="code-lang">boolean</span></B> timeout;
                        timeout = !latch.await(millis,TimeUnit.MILLISECONDS);

                        <B><span class="code-lang">if</span></B> (timeout) {
                                <I><span class="code-comment">// If the timeout expired, then we will stop
</span></I>                                <I><span class="code-comment">// page loading.
</span></I>                                display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {
                                                browser.stop();
                                        }
                                });
                                <I><span class="code-comment">// Waits for the loading is stopped
</span></I>                                latch.await(millis,TimeUnit.MILLISECONDS);
                        }
                        <B><span class="code-lang">return</span></B> timeout;
                } <B><span class="code-lang">catch</span></B> (InterruptedException e) {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> Error(e);
                }
        }
        
        <B><span class="code-lang">private</span></B> List&lt;Node&gt; xPathNodes(String xpath, nsIDOMNode context) {
                
                <I><span class="code-comment">// Obtain the Mozilla DOM HTML document
</span></I>                HTMLDocumentImpl documentImpl = (HTMLDocumentImpl) getW3CDocument();
                nsIDOMHTMLDocument document =  documentImpl.getInstance();
                
                <I><span class="code-comment">// Creates a name space resolver for the document
</span></I>                nsIDOMXPathNSResolver res = xpathEval.createNSResolver(document);
                
                List&lt;Node&gt; resultNodes = <B><span class="code-lang">null</span></B>;
                
                <I><span class="code-comment">// Evaluates given XPath in a given context, using the resolver created
</span></I>                <I><span class="code-comment">// for the current document as an ordered iterator
</span></I>                nsISupports obj = xpathEval.evaluate(xpath, context, res, 
                                nsIDOMXPathResult.ORDERED_NODE_ITERATOR_TYPE, <B><span class="code-lang">null</span></B>);
                <I><span class="code-comment">// Obtain the interface corresponding to the XPath XPCOM results object
</span></I>                nsIDOMXPathResult result = (nsIDOMXPathResult) obj.queryInterface(
                                nsIDOMXPathResult.NS_IDOMXPATHRESULT_IID);
                
                <B><span class="code-lang">try</span></B> {
                        <I><span class="code-comment">// Extract result nodes for the XPath and add them
</span></I>                        <I><span class="code-comment">// to a standard List. 
</span></I>                        resultNodes = getNodes(result);
                } <B><span class="code-lang">catch</span></B>(org.mozilla.xpcom.XPCOMException e){
                        <B><span class="code-lang">throw</span></B> e;
                }                       
                                
                <B><span class="code-lang">return</span></B> resultNodes;
        }
        
        <B><span class="code-lang">private</span></B> &lt;T&gt; List&lt;T&gt; getNodes(nsIDOMXPathResult result) {
                List&lt;T&gt; nodes = <B><span class="code-lang">new</span></B> ArrayList&lt;T&gt;();
                
                nsIDOMNode node;
                <B><span class="code-lang">while</span></B>((node = result.iterateNext()) != <B><span class="code-lang">null</span></B>){
                        <I><span class="code-comment">// Use the functionality provided by the mozdom4java
</span></I>                        <I><span class="code-comment">// (in our case, patched) library to obtain the corresponding
</span></I>                        <I><span class="code-comment">// W3C implementation of a node.
</span></I>                        nodes.add((T)NodeFactory.getNodeInstance(node));
                }
                <B><span class="code-lang">return</span></B> nodes;
        }
        
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String[] args) {

                String xulrunnerPath = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">if</span></B> ( args.length &gt; 0 ) {
                        xulrunnerPath = args[0];
                }
                
                <I><span class="code-comment">// Instantiate our simple web browser
</span></I>                SimpleBrowserWithXPath simpleBrowser = <B><span class="code-lang">new</span></B> SimpleBrowserWithXPath(xulrunnerPath);
        
                <B><span class="code-lang">try</span></B>{
                        <I><span class="code-comment">// Load a page in the browser
</span></I>                        simpleBrowser.go(<B><span class="code-string">&quot;http://www.google.com&quot;</span></B>);
                        
                        <I><span class="code-comment">// Obtain a list of nodes, without a concrete class,
</span></I>                        <I><span class="code-comment">// because the XPath may return nodes of different
</span></I>                        <I><span class="code-comment">// types, so we work with them in a generic way.
</span></I>                        List&lt;Node&gt; nodes = simpleBrowser.xpathNodes(<B><span class="code-string">&quot;//*&quot;</span></B>);
                        <B><span class="code-lang">for</span></B> (Node node: nodes) {
                                System.out.println(<B><span class="code-string">&quot;Node Type: &quot;</span></B> + node.getNodeName()
                                                + <B><span class="code-string">&quot; -- Content: &quot;</span></B> + node.getTextContent());
                        }
                        
                        <I><span class="code-comment">// Obtain a list of HTMLAnchorElements, because
</span></I>                        <I><span class="code-comment">// we can be sure about the result of our XPath,
</span></I>                        <I><span class="code-comment">// if it has any result, will be only of
</span></I>                        <I><span class="code-comment">// HTMLAnchorElement type.
</span></I>                        <B><span class="code-lang">for</span></B> (HTMLAnchorElement a: simpleBrowser.xpathNodes(
                                        <B><span class="code-string">&quot;//a&quot;</span></B>, HTMLAnchorElement.<B><span class="code-lang">class</span></B>)) {
                                System.out.println(<B><span class="code-string">&quot;Anchor: &quot;</span></B> + a.getHref());
                        }
                        
                } <B><span class="code-lang">catch</span></B> (SimpleBrowserException e) {
                        System.err.println(<B><span class="code-string">&quot;Problems calling go method.&quot;</span></B>);
                        e.printStackTrace();
                }
                                                
                Runtime.getRuntime().halt(0);
                
        }
        
}
</pre></div><h3 id="a7.3ClickingElementsandFillingUpForms">7.3 Clicking Elements and Filling Up Forms</h3>
<p>
We can load pages in a safe way, we can extract information, but also, to navigate between web pages we sometimes need write terms in forms, submit that forms clicking buttons, or execute javascript code clicking on a particular element with an <tt>onclick</tt> attribute.
</p>
<p>
Well, click on a element basically require get the element (and this can be done thnks to <tt>xpathNodes</tt> methods seen in the previous section) and call its <tt>submit</tt> method in case of an input element or load the URL in its <tt>href</tt> attribute using our go method in case of an anchor. If the element has an <tt>onclick</tt> attribute, the script contained in that attribute must be executed first.
</p>
<p>
Fill text fileds up, nevertheless, requires modify the DOM tree, setting value attributes (case of <tt>HTMLInputElement</tt>) or even inserting new text nodes (for instance, the case of <tt>HTMLTextAreaElement</tt>). But as you can see in the example below, that is really a non difficult task.
</p>
<div class="code"><pre><B><span class="code-lang">package</span></B> es.ladyr.javaxpcom.browser;

<B><span class="code-lang">import</span></B> java.util.ArrayList;
<B><span class="code-lang">import</span></B> java.util.List;
<B><span class="code-lang">import</span></B> java.util.concurrent.CountDownLatch;
<B><span class="code-lang">import</span></B> java.util.concurrent.TimeUnit;

<B><span class="code-lang">import</span></B> org.eclipse.swt.SWT;
<B><span class="code-lang">import</span></B> org.eclipse.swt.SWTError;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.Browser;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressEvent;
<B><span class="code-lang">import</span></B> org.eclipse.swt.browser.ProgressListener;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Display;
<B><span class="code-lang">import</span></B> org.eclipse.swt.widgets.Shell;

<B><span class="code-lang">import</span></B> org.mozilla.dom.html.HTMLDocumentImpl;
<B><span class="code-lang">import</span></B> org.mozilla.dom.NodeFactory;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIComponentManager;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMDocument;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMHTMLDocument;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMNode;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMWindow;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMXPathEvaluator;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMXPathNSResolver;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIDOMXPathResult;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsISupports;
<B><span class="code-lang">import</span></B> org.mozilla.interfaces.nsIWebBrowser;
<B><span class="code-lang">import</span></B> org.mozilla.xpcom.Mozilla;
<B><span class="code-lang">import</span></B> org.w3c.dom.DOMException;
<B><span class="code-lang">import</span></B> org.w3c.dom.Node;
<B><span class="code-lang">import</span></B> org.w3c.dom.NodeList;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLAnchorElement;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLDocument;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLElement;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLFormElement;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLInputElement;
<B><span class="code-lang">import</span></B> org.w3c.dom.html.HTMLTextAreaElement;


<B><span class="code-lang">public</span></B> <B><span class="code-lang">class</span></B> SimpleBrowserWithClick {
        
        <B><span class="code-lang">private</span></B> <B><span class="code-lang">final</span></B> <B><span class="code-lang">static</span></B> String NS_IDOMXPATHEVALUATOR_CONTRACTID = <B><span class="code-string">&quot;@mozilla.org/dom/xpath-evaluator;1&quot;</span></B>;
        
        <B><span class="code-lang">private</span></B> Browser browser;
        
        <I><span class="code-comment">// We will need SWT display to execute methods
</span></I>        <I><span class="code-comment">// into the SWT event thread.
</span></I>        <B><span class="code-lang">private</span></B> Display display;
        
        <I><span class="code-comment">// Latch used to manage page loading
</span></I>        <I><span class="code-comment">// Uses a count of 1, so when the browser starts loading
</span></I>        <I><span class="code-comment">// a page, we create a new latch, which will be 
</span></I>        <I><span class="code-comment">// decremented when the page is loaded.
</span></I>        <B><span class="code-lang">private</span></B> CountDownLatch latch;
        
        <I><span class="code-comment">// Default timeout to 60 seconds
</span></I>        <B><span class="code-lang">private</span></B> <B><span class="code-lang">long</span></B> defaultTimeout = 60000;
        
        <I><span class="code-comment">// XPath evaluator
</span></I>        <B><span class="code-lang">private</span></B> nsIDOMXPathEvaluator xpathEval;

        <I><span class="code-comment">/**
         * Creates a web browser which is able to load pages waiting until
         * the page is completely loaded and solve xpaths returning
         * the corresponding nodes.
         *
         */</span></I>
        <B><span class="code-lang">public</span></B> SimpleBrowserWithClick (<B><span class="code-lang">final</span></B> String xulrunnerPath) {
                
                <I><span class="code-comment">// Use a latch to wait for the browser initialization.
</span></I>                <B><span class="code-lang">final</span></B> CountDownLatch initLatch = <B><span class="code-lang">new</span></B> CountDownLatch(1);
                
                <I><span class="code-comment">// MozillaBrowser needs a window manager to work. We are using SWT
</span></I>                <I><span class="code-comment">// for the graphical interface, so we need to execute MozillaBrowser
</span></I>                <I><span class="code-comment">// methods into the SWT event thread. If we were use another thread,
</span></I>                <I><span class="code-comment">// that methods could not work properly and throw an exception,
</span></I>                <I><span class="code-comment">// breaking the execution flow and crashing our application.
</span></I>                <B><span class="code-lang">new</span></B> Thread(<B><span class="code-string">&quot;SWT-Event-Thread&quot;</span></B>) {
                        @Override
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {

                                display = <B><span class="code-lang">new</span></B> Display();
                                Shell shell = <B><span class="code-lang">new</span></B> Shell(display);

                                shell.setSize(800, 600);
                                shell.open();

                                <I><span class="code-comment">// If you have XULRunner installed, you can call the constructor without
</span></I>                                <I><span class="code-comment">// the last parameter:
</span></I>                                <I><span class="code-comment">//
</span></I>                                <I><span class="code-comment">// final MozillaBrowser browser = new MozillaBrowser(shell,SWT.BORDER);
</span></I>                                <I><span class="code-comment">//
</span></I>                                <I><span class="code-comment">// That last parameter is the path for XULRunner files
</span></I>                                <I><span class="code-comment">// (where you have uncompressed downloaded XULRunner package).
</span></I>                                <B><span class="code-lang">try</span></B> {
                                                browser = <B><span class="code-lang">new</span></B> Browser(shell, SWT.MOZILLA);
                                        } <B><span class="code-lang">catch</span></B> (SWTError e) {
                                                System.out.println(<B><span class="code-string">&quot;Could not instantiate Browser: &quot;</span></B> + e.getMessage());
                                                <B><span class="code-lang">return</span></B>;
                                        }
                                
                                
                                <I><span class="code-comment">// Adapt browser size to shell size
</span></I>                                browser.setBounds(shell.getClientArea());
                                
                                <I><span class="code-comment">// Listens for page loading status.
</span></I>
                                browser.addProgressListener(<B><span class="code-lang">new</span></B> ProgressListener() {
                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> changed(ProgressEvent event) {
                                        }

                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> completed(ProgressEvent event) {
                                                <I><span class="code-comment">// When a page is loaded, decrement the latch,
</span></I>                                                <I><span class="code-comment">// which count will be 0 after this call.
</span></I>                                                latch.countDown();
                                        }
                                });
                                
                                <I><span class="code-comment">// Realease the initialization latch, which has value 1,
</span></I>                                <I><span class="code-comment">// so after this call its value will be 0.
</span></I>                                initLatch.countDown();
                                
                                <B><span class="code-lang">while</span></B> (!shell.isDisposed()) {
                                        <B><span class="code-lang">if</span></B> (!display.readAndDispatch()) {
                                                display.sleep();
                                        }
                                }

                                System.exit(0);
                        }
                }.start();
                
                <B><span class="code-lang">try</span></B> {
                        <I><span class="code-comment">// Waits until the initialization latch is released.
</span></I>                        initLatch.await();
                } <B><span class="code-lang">catch</span></B> (InterruptedException e) {
                        Thread.interrupted();
                }
                
                <I><span class="code-comment">// Creates the XPath evaluator XPCOM component
</span></I>                Mozilla moz = Mozilla.getInstance();
                nsIComponentManager componentManager = moz.getComponentManager();
                xpathEval = (nsIDOMXPathEvaluator) componentManager.createInstanceByContractID(
                                                NS_IDOMXPATHEVALUATOR_CONTRACTID, <B><span class="code-lang">null</span></B>, nsIDOMXPathEvaluator.NS_IDOMXPATHEVALUATOR_IID);
                
        }
        
        <I><span class="code-comment">/**
         * Loads an URL into the browser and waits until the page is
         * totally loaded.
         * @param url
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> go(<B><span class="code-lang">final</span></B> String url) <B><span class="code-lang">throws</span></B> SimpleBrowserException {
                
                <I><span class="code-comment">// Creates a latch with count 1
</span></I>                latch = <B><span class="code-lang">new</span></B> CountDownLatch(1);

                <I><span class="code-comment">// Uses the SWT event thread to execute the method to
</span></I>                <I><span class="code-comment">// load an URL in the browser.
</span></I>                display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {
                                browser.setUrl(url);
                        }
                });
                
                <I><span class="code-comment">// Waits for the finish of the page loading, or for a given
</span></I>                <I><span class="code-comment">// timeout in case that the loading doesn't finish in a 
</span></I>                <I><span class="code-comment">// reasonable time.
</span></I>                <B><span class="code-lang">boolean</span></B> timeout = waitLoad(defaultTimeout);
                <B><span class="code-lang">if</span></B> (timeout) {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> SimpleBrowserException(<B><span class="code-string">&quot;Timeout waiting page loading.&quot;</span></B>);
                }

        }
        
        <I><span class="code-comment">/**
         * 
         * @return      an W3C HTML Document implementation corresponding to
         *      the Mozilla DOM HTML document currently loaded in the browser.
         * @throws SimpleBrowserException
         */</span></I>
        
        
        <B><span class="code-lang">public</span></B> HTMLDocument getW3CDocument() {
            
                                                
                                <B><span class="code-lang">class</span></B> DocumentGetter <B><span class="code-lang">implements</span></B> Runnable {
                                        <B><span class="code-lang">private</span></B> nsIDOMHTMLDocument htmldoc;

                                                <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run(){
                                nsIWebBrowser webBrowser = (nsIWebBrowser)browser.getWebBrowser();
                                        <B><span class="code-lang">if</span></B> (webBrowser == <B><span class="code-lang">null</span></B>) {
                                                System.out.println(<B><span class="code-string">&quot;Could not get the nsIWebBrowser from the Browser widget&quot;</span></B>);
                                        }       
                        
                                        nsIDOMWindow dw = webBrowser.getContentDOMWindow();

                                nsIDOMDocument nsDoc = dw.getDocument();

                                htmldoc = (nsIDOMHTMLDocument) nsDoc
                                                                                .queryInterface(nsIDOMHTMLDocument.NS_IDOMHTMLDOCUMENT_IID);
                                
                                }


                                                <B><span class="code-lang">public</span></B> nsIDOMHTMLDocument getHtmldoc() {
                                                        <B><span class="code-lang">return</span></B> htmldoc;
                                                }}
                                
                                DocumentGetter dg = <B><span class="code-lang">new</span></B> DocumentGetter();
                                

                                display.syncExec(dg);
                                
                                <B><span class="code-lang">return</span></B> HTMLDocumentImpl.getDOMInstance(dg.getHtmldoc());
                        }
        
        <I><span class="code-comment">/**
         * 
         * @param xpath
         * @return      a list with the nodes corresponding to a given xpath.
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> List&lt;Node&gt; xpathNodes(String xpath) {
                
                <B><span class="code-lang">return</span></B> xPathNodes(xpath, 
                                ((HTMLDocumentImpl) getW3CDocument()).getInstance());           
        }
        
        <I><span class="code-comment">/**
         * 
         * @param &lt;T&gt;
         * @param xpath
         * @param nodeClass
         * @return      a list of &lt;code&gt;nodeClass&lt;/code&gt; nodes corresponding
         *      to a given xpath.
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> &lt;T <B><span class="code-lang">extends</span></B> Node&gt; List&lt;T&gt; xpathNodes(String xpath, Class&lt;T&gt; nodeClass) {
                
                
                <B><span class="code-lang">return</span></B> (List&lt;T&gt;)xPathNodes(xpath,
                    ((HTMLDocumentImpl) getW3CDocument()).getInstance());
                
        }       

        <I><span class="code-comment">/**
         * Enters the given text in a W3C input node. If the node is not
         * a HTMLInputElement or a HTMLTextAreaElement instance, then
         * a exception is thrown.
         * 
         * @param node
         * @param text
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> enter(<B><span class="code-lang">final</span></B> Node node, <B><span class="code-lang">final</span></B> String text) <B><span class="code-lang">throws</span></B> SimpleBrowserException {

                <B><span class="code-lang">if</span></B> (node <B><span class="code-lang">instanceof</span></B> HTMLInputElement) {
                        HTMLInputElement textComponent = (HTMLInputElement) node;
                        enter(textComponent, text);
                } <B><span class="code-lang">else</span></B> <B><span class="code-lang">if</span></B> (node <B><span class="code-lang">instanceof</span></B> HTMLTextAreaElement) {
                        HTMLTextAreaElement textComponent = (HTMLTextAreaElement) node;
                        enter(textComponent, text);
                } <B><span class="code-lang">else</span></B> {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> SimpleBrowserException(
                                        <B><span class="code-string">&quot;enter only works with textfield (HTMLInputElement) or textarea (HTMLTextAreaElement)&quot;</span></B>);
                }

        }

        <I><span class="code-comment">/**
         * Enters the given text in a HTMLInputElement. If text is 
         * &lt;code&gt;null&lt;/code&gt;, then an empty string will be inserted. 
         * 
         * @param inputElement
         * @param text
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> enter(<B><span class="code-lang">final</span></B> HTMLInputElement inputElement, String text) {
                
                <B><span class="code-lang">final</span></B> String inputText;
                <B><span class="code-lang">if</span></B> (text == <B><span class="code-lang">null</span></B>) {
                        inputText = <B><span class="code-string">&quot;&quot;</span></B>;
                } <B><span class="code-lang">else</span></B> {
                        inputText = text;
                }

                display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {
                                inputElement.setValue(inputText);
                        }
                });
        }

        <I><span class="code-comment">/**
         * Enters the given text in a HTMLTextAreaElement. If text is 
         * &lt;code&gt;null&lt;/code&gt;, then an empty string will be inserted. 
         * 
         * @param textArea
         * @param text
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> enter(<B><span class="code-lang">final</span></B> HTMLTextAreaElement textArea, String text) {
                
                <B><span class="code-lang">final</span></B> String inputText;
                <B><span class="code-lang">if</span></B> (text == <B><span class="code-lang">null</span></B>) {
                        inputText = <B><span class="code-string">&quot;&quot;</span></B>;
                } <B><span class="code-lang">else</span></B> {
                        inputText = text;
                }

                display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {

                                <I><span class="code-comment">// Empty the text area
</span></I>                                NodeList nodeList = textArea.getChildNodes();
                                <B><span class="code-lang">for</span></B> (<B><span class="code-lang">int</span></B> i = 0; i &lt; nodeList.getLength(); i++) {
                                        textArea.removeChild(nodeList.item(i));
                                }
                                
                                <I><span class="code-comment">// Fill the text area with a new text node containing the given text
</span></I>                                <B><span class="code-lang">try</span></B> {
                                        textArea.appendChild(getW3CDocument().createTextNode(inputText));
                                        
                                } <B><span class="code-lang">catch</span></B> (DOMException e) {
                                        System.err.println(<B><span class="code-string">&quot;Problems inserting the new child node.&quot;</span></B>);
                                        e.printStackTrace();
                                        
                                }
                        }
                });
        }
        
        <I><span class="code-comment">/**
         * Clicks on a W3C node. If the HTML element has an attribute 'oncllick',
         * first try to execute the script and then click the element. If the node
         * is not an instance of HTMLInputElement, HTMLAnchorElement or HTMLElement,
         * then an exception will be thrown.
         * 
         * @param node
         * @throws SimpleBrowserException
         */</span></I>
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> click(Node node) <B><span class="code-lang">throws</span></B> SimpleBrowserException {
                
                <I><span class="code-comment">// If the node is a instance of HTMLElement and contains an
</span></I>                <I><span class="code-comment">// 'onclick' attribute, then we must execute the script
</span></I>                <B><span class="code-lang">if</span></B> ( node <B><span class="code-lang">instanceof</span></B> HTMLElement ){                     
                        <B><span class="code-lang">final</span></B> HTMLElement ele = (HTMLElement) node; 
                        
                        display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                                <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {

                                        String onclick = ele.getAttribute(<B><span class="code-string">&quot;onclick&quot;</span></B>);
                                        <B><span class="code-lang">if</span></B> ( onclick != <B><span class="code-lang">null</span></B> &amp;&amp; !onclick.equals(<B><span class="code-string">&quot;&quot;</span></B>) ) {
                                                browser.execute(onclick);
                                        }
                                }
                        });
                }
                                
                <I><span class="code-comment">// If the node is an instance of HTMLInputElement, then could be
</span></I>                <I><span class="code-comment">// a submit button (corresponding to types submit and image) then
</span></I>                <I><span class="code-comment">// we must submit the form only if it has the required attribute
</span></I>                <I><span class="code-comment">// 'action'.
</span></I>                <B><span class="code-lang">if</span></B> (node <B><span class="code-lang">instanceof</span></B> HTMLInputElement) {
                        HTMLInputElement button = (HTMLInputElement) node;
                        
                        <B><span class="code-lang">if</span></B> ( button.getType().equalsIgnoreCase(<B><span class="code-string">&quot;submit&quot;</span></B>) ||
                                        button.getType().equalsIgnoreCase(<B><span class="code-string">&quot;image&quot;</span></B>) ){
                                
                                String formAction = button.getForm().getAction();
                                <B><span class="code-lang">if</span></B> ( formAction != <B><span class="code-lang">null</span></B> &amp;&amp; !formAction.equals(<B><span class="code-string">&quot;&quot;</span></B>) ){
                                        submitForm(button.getForm());
                                }
                                
                        }
                        
                <I><span class="code-comment">// If the node is an instance of HTMLAnchorElement we only
</span></I>                <I><span class="code-comment">// need to call 'go' method for the 'href' attribute.
</span></I>                } <B><span class="code-lang">else</span></B> <B><span class="code-lang">if</span></B> (node <B><span class="code-lang">instanceof</span></B> HTMLAnchorElement) {
                        
                        HTMLAnchorElement link = (HTMLAnchorElement) node;
                        
                        <B><span class="code-lang">if</span></B> (link.getHref() != <B><span class="code-lang">null</span></B> &amp;&amp; !link.getHref().equals(<B><span class="code-string">&quot;&quot;</span></B>)) {
                                go(link.getHref());
                        }
                
                <I><span class="code-comment">// If the node is not an instance of HTMLElement class, then we
</span></I>                <I><span class="code-comment">// cannot click on it.
</span></I>                } <B><span class="code-lang">else</span></B> <B><span class="code-lang">if</span></B> ( !(node <B><span class="code-lang">instanceof</span></B> HTMLElement) ) {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> SimpleBrowserException(
                                        <B><span class="code-string">&quot;Click only works with HTMLElements with onclick &quot;</span></B>
                                        + <B><span class="code-string">&quot; attribute or links (HTMLAnchorElement) or buttons (HTMLButtonElement)&quot;</span></B>);
                }
                
        }
        
        <B><span class="code-lang">private</span></B> <B><span class="code-lang">boolean</span></B> waitLoad(<B><span class="code-lang">long</span></B> millis) {

                <B><span class="code-lang">try</span></B> {
                        <I><span class="code-comment">// Uses the latch, created by 'go' method to wait for
</span></I>                        <I><span class="code-comment">// the finish of the page loading (it will occurs when
</span></I>                        <I><span class="code-comment">// our 'progressListener' receives a event for its method 
</span></I>                        <I><span class="code-comment">// 'completed'), or for a given timeout in case that the
</span></I>                        <I><span class="code-comment">// loading doesn't finish in a reasonable time.
</span></I>                        <B><span class="code-lang">boolean</span></B> timeout;
                        timeout = !latch.await(millis,TimeUnit.MILLISECONDS);

                        <B><span class="code-lang">if</span></B> (timeout) {
                                <I><span class="code-comment">// If the timeout expired, then we will stop
</span></I>                                <I><span class="code-comment">// page loading.
</span></I>                                display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {
                                                browser.stop();
                                        }
                                });
                                <I><span class="code-comment">// Waits for the loading is stopped
</span></I>                                latch.await(millis,TimeUnit.MILLISECONDS);
                        }
                        <B><span class="code-lang">return</span></B> timeout;
                } <B><span class="code-lang">catch</span></B> (InterruptedException e) {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> Error(e);
                }
        }
        
        <B><span class="code-lang">private</span></B> List&lt;Node&gt; xPathNodes(String xpath, nsIDOMNode context) {
                
                <I><span class="code-comment">// Obtain the Mozilla DOM HTML document
</span></I>                
                HTMLDocumentImpl documentImpl = (HTMLDocumentImpl) getW3CDocument();
                
                nsIDOMHTMLDocument document =  documentImpl.getInstance();
                
                <I><span class="code-comment">// Creates a name space resolver for the document
</span></I>                nsIDOMXPathNSResolver res = xpathEval.createNSResolver(document);
                
                List&lt;Node&gt; resultNodes = <B><span class="code-lang">null</span></B>;
                
                <I><span class="code-comment">// Evaluates given XPath in a given context, using the resolver created
</span></I>                <I><span class="code-comment">// for the current document as an ordered iterator
</span></I>                nsISupports obj = xpathEval.evaluate(xpath, context, res, 
                                nsIDOMXPathResult.ORDERED_NODE_ITERATOR_TYPE, <B><span class="code-lang">null</span></B>);
                <I><span class="code-comment">// Obtain the interface corresponding to the XPath XPCOM results object
</span></I>                nsIDOMXPathResult result = (nsIDOMXPathResult) obj.queryInterface(
                                nsIDOMXPathResult.NS_IDOMXPATHRESULT_IID);
                
                <B><span class="code-lang">try</span></B> {
                        <I><span class="code-comment">// Extract result nodes for the XPath and add them
</span></I>                        <I><span class="code-comment">// to a standard List. 
</span></I>                        resultNodes = getNodes(result);
                } <B><span class="code-lang">catch</span></B>(org.mozilla.xpcom.XPCOMException e){
                        <B><span class="code-lang">throw</span></B> e;
                }                     
                                
                <B><span class="code-lang">return</span></B> resultNodes;
        }
        
        <B><span class="code-lang">private</span></B> &lt;T&gt; List&lt;T&gt; getNodes(nsIDOMXPathResult result) {
                List&lt;T&gt; nodes = <B><span class="code-lang">new</span></B> ArrayList&lt;T&gt;();
                
                nsIDOMNode node;
                <B><span class="code-lang">while</span></B>((node = result.iterateNext()) != <B><span class="code-lang">null</span></B>){
                        <I><span class="code-comment">// Use the functionality provided by the mozdom4java
</span></I>                        <I><span class="code-comment">// (in our case, patched) library to obtain the corresponding
</span></I>                        <I><span class="code-comment">// W3C implementation of a node.
</span></I>                        nodes.add((T)NodeFactory.getNodeInstance(node));
                }
                
                <B><span class="code-lang">return</span></B> nodes;
        }
        
        <B><span class="code-lang">private</span></B> <B><span class="code-lang">void</span></B> submitForm(<B><span class="code-lang">final</span></B> HTMLFormElement form) <B><span class="code-lang">throws</span></B> SimpleBrowserException {

                <I><span class="code-comment">// Uses the latch to wait for response page loading when the form
</span></I>                <I><span class="code-comment">// is submitted.
</span></I>                latch = <B><span class="code-lang">new</span></B> CountDownLatch(1);
                
                <I><span class="code-comment">// Submits the form.
</span></I>                display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                        <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run() {
                                form.submit();
                        }
                });

                <I><span class="code-comment">// Waits for the server response, that is, until the response 
</span></I>                <I><span class="code-comment">// page finish loading.
</span></I>                <B><span class="code-lang">boolean</span></B> timeout = waitLoad(defaultTimeout);
                <B><span class="code-lang">if</span></B> (timeout) {
                        <B><span class="code-lang">throw</span></B> <B><span class="code-lang">new</span></B> SimpleBrowserException(<B><span class="code-string">&quot;Timeout waiting page loading.&quot;</span></B>);
                }
                
        }
        
        <B><span class="code-lang">public</span></B> <B><span class="code-lang">static</span></B> <B><span class="code-lang">void</span></B> main(String[] args) {

                String xulrunnerPath = <B><span class="code-lang">null</span></B>;
                <B><span class="code-lang">if</span></B> ( args.length &gt; 0 ) {
                        xulrunnerPath = args[0];
                }
                
                <I><span class="code-comment">// Instantiate our simple web browser
</span></I>                <B><span class="code-lang">final</span></B> SimpleBrowserWithClick simpleBrowser = <B><span class="code-lang">new</span></B> SimpleBrowserWithClick(xulrunnerPath);
        
                <B><span class="code-lang">try</span></B>{
                        
                        <I><span class="code-comment">// Load a web page
</span></I>                        simpleBrowser.go(<B><span class="code-string">&quot;http://www.google.es&quot;</span></B>);
                        
                        Thread.sleep(3000);
                        
                        <I><span class="code-comment">// Get the W3C DOM anchor element containing the text 'Noticias'
</span></I>                        HTMLAnchorElement a = 
                                                        simpleBrowser.xpathNodes(<B><span class="code-string">&quot;//a[contains(text(),'Noticias')]&quot;</span></B>,
                                                HTMLAnchorElement.<B><span class="code-lang">class</span></B>).get(0);
                        <I><span class="code-comment">// Click on the anchor previously obtained
</span></I>                        simpleBrowser.click(a);
                        
                        Thread.sleep(2000);
                        
                        <I><span class="code-comment">// Get the input field to write search terms
</span></I>                        simpleBrowser.display.syncExec(<B><span class="code-lang">new</span></B> Runnable() {
                            <B><span class="code-lang">public</span></B> <B><span class="code-lang">void</span></B> run(){
                                <B><span class="code-lang">try</span></B>{
                                        Node node = simpleBrowser.xpathNodes(<B><span class="code-string">&quot;//input[@name='q']&quot;</span></B>).get(0);
                                        simpleBrowser.enter(node, <B><span class="code-string">&quot;nasdaq&quot;</span></B>);
                                }<B><span class="code-lang">catch</span></B> (SimpleBrowserException sbe){
                                        sbe.printStackTrace();
                                }
                                
                              }
                            });
                       <I><span class="code-comment">// Node node = simpleBrowser.xpathNodes(&quot;//input[@name='q']&quot;).get(0);
</span></I>                        
                        <I><span class="code-comment">// Enter the text 'nasdaq' in the input field
</span></I>                        
                        Thread.sleep(2000);
                        
                        <I><span class="code-comment">// Get the input button used to submit the form
</span></I>                        HTMLInputElement e =
                                simpleBrowser.xpathNodes(<B><span class="code-string">&quot;//input[@value='Buscar en Noticias']&quot;</span></B>,
                                                HTMLInputElement.<B><span class="code-lang">class</span></B>).get(0);
                        
                        <I><span class="code-comment">// Click the input buuton and start the search for the term 'nasdaq'
</span></I>                        <I><span class="code-comment">// in news section
</span></I>                        
                        
                        
                        simpleBrowser.click(e); 
                        
                        Thread.sleep(3000);

                        
                        <I><span class="code-comment">// Load a different page with javascript examples
</span></I>                        simpleBrowser.go(<B><span class="code-string">&quot;http://www.codearchive.com/code/0300/0309-acces009.htm&quot;</span></B>);
                        
                        <I><span class="code-comment">// Get a W3C anchor element containing an 'onlick' attribute 
</span></I>                        a = simpleBrowser.xpathNodes(<B><span class="code-string">&quot;//a[contains(text(),'4')]&quot;</span></B>,
                                                HTMLAnchorElement.<B><span class="code-lang">class</span></B>).get(0);
                        <I><span class="code-comment">// Click the anchor and then the javascript will be executed by
</span></I>                        <I><span class="code-comment">// our browser
</span></I>                        simpleBrowser.click(a);
                        
                        Thread.sleep(3000);
                        
                } <B><span class="code-lang">catch</span></B> (SimpleBrowserException e) {
                        System.err.println(<B><span class="code-string">&quot;Problems calling go method.&quot;</span></B>);
                        e.printStackTrace();
                } <B><span class="code-lang">catch</span></B> (InterruptedException e) {
                        System.err.println(<B><span class="code-string">&quot;Problems calling sleep.&quot;</span></B>);

                        e.printStackTrace();
                }
                                                
                Runtime.getRuntime().halt(0);
                
        }
        
}
</pre></div><p>
At this point, you have a totally functional browser which is able to navigate across the Web in an automated manner, using the public methods included to deal with the loaded documents W3C DOM tree.
</p>
<p>
Thanks for reading this guide!!!
</p>
<h2 id="a8.CopyrightInformation">8. Copyright Information</h2>
<p>
This content is copyrighted by
</p>
<ul><li><a class="ext-link" href="http://ladyr.es"><span class="icon">LADyR</span></a> (<a class="ext-link" href="http://ladyr.es"><span class="icon">http://ladyr.es</span></a>)
</li><li><a class="ext-link" href="http://gavab.escet.urjc.es"><span class="icon">Gavab</span></a> (<a class="ext-link" href="http://gavab.escet.urjc.es"><span class="icon">http://gavab.escet.urjc.es</span></a>)
</li><li>Alberto PÃ©rez GarcÃ­a-Plaza
</li><li>Micael Gallego Carrillo
</li><li>Luis LÃ³pez FernÃ¡ndez
</li></ul><p>
The content of this tutorial is licensed under <a class="ext-link" href="http://creativecommons.org/licenses/by/3.0/"><span class="icon">Creative Commons Attribution 3.0 License</span></a> and the code is licensed under <a class="ext-link" href="http://www.gnu.org/licenses/gpl.txt"><span class="icon">GPL</span></a>.
</p>
<p>
<a class="ext-link" href="http://creativecommons.org/images/public/somerights20.png"><span class="icon">http://creativecommons.org/images/public/somerights20.png</span></a>
</p>
<hr />
<p>
e-mail: info-ladyr at gsyc.es<br />
Web Site: <a class="ext-link" href="http://www.ladyr.es/"><span class="icon">LADyR</span></a>
</p>
<hr />

        
        
      </div>
          <h3>Attachments</h3>
          <ul>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/xulrunner-1.9.en-US.linux-i686.tar.bz2" title="View attachment">xulrunner-1.9.en-US.linux-i686.tar.bz2</a>
      (<span title="8335839 bytes">7.9 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-24T13%3A21%3A07Z%2B0200&amp;precision=second" title="2008-09-24T13:21:07Z+0200 in Timeline">2 years</a> ago.
                <q>XULRunner 1.9 for Linux</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/xulrunner-1.9.en-US.win32.zip" title="View attachment">xulrunner-1.9.en-US.win32.zip</a>
      (<span title="8613912 bytes">8.2 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-24T13%3A25%3A09Z%2B0200&amp;precision=second" title="2008-09-24T13:25:09Z+0200 in Timeline">2 years</a> ago.
                <q>XULRunner 1.9 for Windows</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/xulrunner-1.9.en-US.linux-i686.sdk.tar.bz2" title="View attachment">xulrunner-1.9.en-US.linux-i686.sdk.tar.bz2</a>
      (<span title="30276129 bytes">28.9 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-24T13%3A29%3A03Z%2B0200&amp;precision=second" title="2008-09-24T13:29:03Z+0200 in Timeline">2 years</a> ago.
                <q>XULRunner-sdk 1.9 for Linux</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/xulrunner-1.9.en-US.win32.sdk.zip" title="View attachment">xulrunner-1.9.en-US.win32.sdk.zip</a>
      (<span title="21707056 bytes">20.7 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-24T13%3A30%3A45Z%2B0200&amp;precision=second" title="2008-09-24T13:30:45Z+0200 in Timeline">2 years</a> ago.
                <q>XULRunner-sdk 1.9 for Windows</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/swt-3.4-win32-win32-x86.zip" title="View attachment">swt-3.4-win32-win32-x86.zip</a>
      (<span title="5210246 bytes">5.0 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-24T13%3A36%3A49Z%2B0200&amp;precision=second" title="2008-09-24T13:36:49Z+0200 in Timeline">2 years</a> ago.
                <q>swt-3.4 for windows</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/swt-3.4-gtk-linux-x86.zip" title="View attachment">swt-3.4-gtk-linux-x86.zip</a>
      (<span title="4548421 bytes">4.3 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-24T13%3A38%3A11Z%2B0200&amp;precision=second" title="2008-09-24T13:38:11Z+0200 in Timeline">2 years</a> ago.
                <q>swt-3.4 for linux</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/mozdom4java-1.2.zip" title="View attachment">mozdom4java-1.2.zip</a>
      (<span title="774643 bytes">0.7 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-24T13%3A42%3A36Z%2B0200&amp;precision=second" title="2008-09-24T13:42:36Z+0200 in Timeline">2 years</a> ago.
                <q>Last version of mozdom4java, on August 2008 (mozdom4java-1.2.zip)</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/w3chtml.jar" title="View attachment">w3chtml.jar</a>
      (<span title="23783 bytes">23.2 kB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-24T13%3A47%3A36Z%2B0200&amp;precision=second" title="2008-09-24T13:47:36Z+0200 in Timeline">2 years</a> ago.
                <q>Contains W3C DOM HTML level 2 interfaces into two different packages, org.w3c.dom.html and org.w3c.dom.html2</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/w3cextension.jar" title="View attachment">w3cextension.jar</a>
      (<span title="1103 bytes">1.1 kB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-24T13%3A49%3A44Z%2B0200&amp;precision=second" title="2008-09-24T13:49:44Z+0200 in Timeline">2 years</a> ago.
                <q>Contains <a class="missing wiki" href="/wiki/wiki/KeyEvent" rel="nofollow">KeyEvent?</a> class into the org.w3c.dom.events package</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/patchedmozdom4java-1.2.jar" title="View attachment">patchedmozdom4java-1.2.jar</a>
      (<span title="770422 bytes">0.7 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-25T00%3A16%3A42Z%2B0200&amp;precision=second" title="2008-09-25T00:16:42Z+0200 in Timeline">2 years</a> ago.
                <q>Patch for mozdom4java library</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/patchedmozdom4java-1.2-src.jar" title="View attachment">patchedmozdom4java-1.2-src.jar</a>
      (<span title="172567 bytes">168.5 kB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-25T00%3A19%3A16Z%2B0200&amp;precision=second" title="2008-09-25T00:19:16Z+0200 in Timeline">2 years</a> ago.
                <q>Source code for the patched version of mozdom4java library</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/LadyrBrowser-src.zip" title="View attachment">LadyrBrowser-src.zip</a>
      (<span title="41889 bytes">40.9 kB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-25T01%3A14%3A16Z%2B0200&amp;precision=second" title="2008-09-25T01:14:16Z+0200 in Timeline">2 years</a> ago.
                <q>source code for the 4,5,6,7 chapters</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/LadyrBrowser-bin-linux.zip" title="View attachment">LadyrBrowser-bin-linux.zip</a>
      (<span title="1854616 bytes">1.8 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-25T11%3A00%3A17Z%2B0200&amp;precision=second" title="2008-09-25T11:00:17Z+0200 in Timeline">2 years</a> ago.
                <q>Binaries for the sections 4, 5, 6, 7. Linux version</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/mozdom4java_patch.diff" title="View attachment">mozdom4java_patch.diff</a>
      (<span title="11938 bytes">11.7 kB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-25T11%3A52%3A54Z%2B0200&amp;precision=second" title="2008-09-25T11:52:54Z+0200 in Timeline">2 years</a> ago.
                <q>Patched for mozdom4java-1.2</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/MozillaInterfaces.jar" title="View attachment">MozillaInterfaces.jar</a>
      (<span title="700687 bytes">0.7 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-25T12%3A36%3A02Z%2B0200&amp;precision=second" title="2008-09-25T12:36:02Z+0200 in Timeline">2 years</a> ago.
                <q>Mozilla Interfaces</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/MozillaInterfaces-src.jar" title="View attachment">MozillaInterfaces-src.jar</a>
      (<span title="1123567 bytes">1.1 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-25T12%3A37%3A14Z%2B0200&amp;precision=second" title="2008-09-25T12:37:14Z+0200 in Timeline">2 years</a> ago.
                <q>Source code for Mozilla Interfaces</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/MozillaGlue.jar" title="View attachment">MozillaGlue.jar</a>
      (<span title="18871 bytes">18.4 kB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-09-25T12%3A40%3A41Z%2B0200&amp;precision=second" title="2008-09-25T12:40:41Z+0200 in Timeline">2 years</a> ago.
                <q>Needed classes for xulrunner</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/javaxpcom-test-src.zip" title="View attachment">javaxpcom-test-src.zip</a>
      (<span title="16880 bytes">16.5 kB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-10-02T10%3A41%3A15Z%2B0200&amp;precision=second" title="2008-10-02T10:41:15Z+0200 in Timeline">2 years</a> ago.
                <q>Source code for the 3rd section of the guide</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/complete-guide-resources-linux.zip" title="View attachment">complete-guide-resources-linux.zip</a>
      (<span title="79469890 bytes">75.8 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-10-02T10%3A48%3A12Z%2B0200&amp;precision=second" title="2008-10-02T10:48:12Z+0200 in Timeline">2 years</a> ago.
                <q>All guide resources for Linux Systems</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/LadyrBrowser-bin-win.zip" title="View attachment">LadyrBrowser-bin-win.zip</a>
      (<span title="2291062 bytes">2.2 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-10-03T12%3A53%3A18Z%2B0200&amp;precision=second" title="2008-10-03T12:53:18Z+0200 in Timeline">2 years</a> ago.
                <q>Binaries for the sections 4, 5, 6, 7. Windows version.</q>
              </li>
              <li>
      <a href="/wiki/attachment/wiki/XPCOMGuide/complete-guide-resources-windows.zip" title="View attachment">complete-guide-resources-windows.zip</a>
      (<span title="43352730 bytes">41.3 MB</span>) - added by <em>dsevillano</em>
      <a class="timeline" href="/wiki/timeline?from=2008-10-03T13%3A17%3A14Z%2B0200&amp;precision=second" title="2008-10-03T13:17:14Z+0200 in Timeline">2 years</a> ago.
                <q>All guide resources for Windows Systems</q>
              </li>
          </ul>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="last first">
          <a rel="nofollow" href="/wiki/wiki/XPCOMGuide?format=txt">Plain Text</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="tracpowered" href="http://trac.edgewall.org/"><img src="/trac/trac_logo_mini.png" height="30" width="107" alt="Trac Powered" /></a>
      <p class="left">
        Powered by <a href="/wiki/about"><strong>Trac 0.11.1</strong></a><br />
        By <a href="http://www.edgewall.org/">Edgewall Software</a>.
      </p>
      <p class="right">Visit the LADyR main site <br /> <a href="http://ladyr.es">http://ladyr.es/</a> <br /> email: <a href="mailto:info-ladyr--at--gsyc.es">info-ladyr at gsyc.es</a></p>
    </div>
  </body>
</html>